[{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/eslint.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/next.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/postcss.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/actions/user-actions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(auth)/login/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/auth/google/authorize/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/auth/google/callback/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/auth/google/gmail/authorize/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/auth/google/gmail/callback/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[244,247],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[244,247],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\nimport jwt from 'jsonwebtoken'\nimport { google } from 'googleapis'\n\nimport { prisma } from '@/lib/prisma'\nimport { createGmailOAuthClient } from '@/lib/google-gmail'\n\nconst db = prisma as any\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const code = searchParams.get('code')\n    const state = searchParams.get('state')\n    const error = searchParams.get('error')\n    const nonceCookie = request.cookies.get('gmail_oauth_nonce')?.value\n\n    if (error) {\n      console.error('Gmail OAuth error:', error)\n      return NextResponse.redirect(`${process.env.NEXTJS_URL}/dashboard/settings?error=gmail_access_denied`)\n    }\n\n    if (!code || !state || !nonceCookie) {\n      console.error('Missing parameters in Gmail OAuth callback')\n      return NextResponse.redirect(`${process.env.NEXTJS_URL}/dashboard/settings?error=gmail_invalid_request`)\n    }\n\n    const jwtSecret = process.env.JWT_SECRET\n    if (!jwtSecret) {\n      throw new Error('JWT_SECRET is required for Gmail OAuth callback')\n    }\n\n    let decoded: jwt.JwtPayload\n    try {\n      decoded = jwt.verify(state, jwtSecret) as jwt.JwtPayload\n    } catch (verificationError) {\n      console.error('Failed to verify Gmail OAuth state:', verificationError)\n      return NextResponse.redirect(`${process.env.NEXTJS_URL}/dashboard/settings?error=gmail_invalid_state`)\n    }\n\n    if (decoded.n !== nonceCookie) {\n      console.error('Gmail OAuth nonce mismatch detected')\n      return NextResponse.redirect(`${process.env.NEXTJS_URL}/dashboard/settings?error=gmail_nonce_mismatch`)\n    }\n\n    const userId = typeof decoded.userId === 'string' ? decoded.userId : null\n    if (!userId) {\n      console.error('Gmail OAuth callback missing user id in state')\n      return NextResponse.redirect(`${process.env.NEXTJS_URL}/dashboard/settings?error=gmail_invalid_user`)\n    }\n\n    const user = await prisma.user.findUnique({ where: { id: userId } })\n    if (!user) {\n      console.error('User not found for Gmail OAuth callback:', userId)\n      return NextResponse.redirect(`${process.env.NEXTJS_URL}/login?error=user_not_found`)\n    }\n\n    const oauth2Client = createGmailOAuthClient()\n    const { tokens } = await oauth2Client.getToken(code)\n\n    if (!tokens.access_token || !tokens.refresh_token) {\n      console.error('Invalid Gmail tokens received')\n      return NextResponse.redirect(`${process.env.NEXTJS_URL}/dashboard/settings?error=gmail_invalid_tokens`)\n    }\n\n    oauth2Client.setCredentials({\n      access_token: tokens.access_token,\n      refresh_token: tokens.refresh_token,\n    })\n\n    const gmail = google.gmail({ version: 'v1', auth: oauth2Client })\n    const profileResponse = await gmail.users.getProfile({ userId: 'me' })\n    const emailAddress = profileResponse.data.emailAddress\n\n    if (!emailAddress) {\n      console.error('Unable to determine Gmail address for user', userId)\n      return NextResponse.redirect(`${process.env.NEXTJS_URL}/dashboard/settings?error=gmail_missing_address`)\n    }\n\n    const now = new Date()\n    const expiresAt = tokens.expiry_date ? new Date(tokens.expiry_date) : new Date(Date.now() + 55 * 60 * 1000)\n\n    const existingAccount = await db.gmailAccount.findUnique({\n      where: { userId },\n    })\n    const existingByEmail = await db.gmailAccount.findUnique({\n      where: { emailAddress },\n    })\n\n    const baseData = {\n      emailAddress,\n      accessToken: tokens.access_token,\n      refreshToken: tokens.refresh_token,\n      expiresAt,\n      tokenType: tokens.token_type || 'Bearer',\n      scope: tokens.scope || '',\n      connectedAt: now,\n    }\n\n    if (existingAccount) {\n      await db.gmailAccount.update({\n        where: { userId },\n        data: baseData,\n      })\n    } else if (existingByEmail) {\n      if (existingByEmail.userId !== userId) {\n        console.warn(\n          `Gmail account ${emailAddress} was previously linked to user ${existingByEmail.userId}, reassigning to ${userId}`,\n        )\n      }\n      await db.gmailAccount.update({\n        where: { emailAddress },\n        data: {\n          ...baseData,\n          userId,\n        },\n      })\n    } else {\n      await db.gmailAccount.create({\n        data: {\n          ...baseData,\n          userId,\n        },\n      })\n    }\n\n    const response = NextResponse.redirect(`${process.env.NEXTJS_URL}/dashboard/settings?success=gmail_connected`)\n    response.cookies.set('gmail_oauth_nonce', '', { maxAge: 0, path: '/', httpOnly: true, sameSite: 'lax' })\n    return response\n  } catch (error) {\n    console.error('Gmail OAuth callback error:', error)\n    return NextResponse.redirect(`${process.env.NEXTJS_URL}/dashboard/settings?error=gmail_callback_failed`)\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/auth/google/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/auth/login/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/auth/logout/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/auth/session/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/campaigns/[id]/retry/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/campaigns/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/campaigns/[id]/status/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/campaigns/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3476,3479],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3476,3479],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/app/api/campaigns/route.ts\n\"use server\"\nimport { revalidateTag } from 'next/cache'\nimport { NextRequest, NextResponse } from 'next/server'\nimport { verifyAuth } from '@/lib/auth'\nimport { prisma } from '@/lib/prisma'\nimport { Prisma } from '@prisma/client'\n\nimport { generateIdempotencyKey } from '@/lib/utils'\nimport { getCampaignsForUser } from '@/lib/apollo/campaigns'\nimport { z } from 'zod'\nimport { enqueueJob } from '@/lib/queue'\n\nconst createCampaignSchema = z.object({\n  name: z.string().min(1).max(255),\n  jobTitles: z.array(z.string().min(1)).min(1).max(10).transform(arr => arr.join(', ')),\n  keywords: z.string().max(1000).optional().transform(val => val || ''),\n  locations: z.array(z.string().min(1)).min(1).max(10).transform(arr => arr.join(', ')),\n  googleSheetId: z.string().min(1),\n  maxLeads: z.number().int().positive().max(10000).default(1000),\n  pageSize: z.number().int().positive().max(100).default(25),\n  includeDomains: z.string().max(1000).optional().transform(val => val || undefined),\n  excludeDomains: z.string().max(1000).optional().transform(val => val || undefined),\n  searchMode: z.enum(['balanced', 'conserve']).default('balanced'),\n})\n\nexport async function POST(request: NextRequest) {\n  try {\n    const authResult = await verifyAuth(request)\n    if (!authResult.success || !authResult.user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const body = await request.json()\n    const validatedData = createCampaignSchema.parse(body)\n\n    // Verify Google Sheet belongs to user\n    const googleSheet = await prisma.googleSheet.findFirst({\n      where: {\n        spreadsheetId: validatedData.googleSheetId,\n        userId: authResult.user.userId,\n      },\n    })\n\n    if (!googleSheet) {\n      return NextResponse.json(\n        { error: 'Google Sheet not found or not accessible' },\n        { status: 404 }\n      )\n    }\n\n    // Prepare campaign data, removing undefined values\n    const campaignData = {\n      userId: authResult.user.userId,\n      name: validatedData.name,\n      nicheOrJobTitle: validatedData.jobTitles, // Already joined by schema transform\n      keywords: validatedData.keywords, // Already handled by schema transform\n      location: validatedData.locations, // Already joined by schema transform\n      googleSheetId: googleSheet.id,\n      maxLeads: validatedData.maxLeads,\n      pageSize: validatedData.pageSize,\n      ...(validatedData.includeDomains ? { includeDomains: validatedData.includeDomains } : {}),\n      ...(validatedData.excludeDomains ? { excludeDomains: validatedData.excludeDomains } : {}),\n      searchMode: validatedData.searchMode,\n    }\n\n    let campaign\n\n    try {\n      campaign = await prisma.campaign.create({\n        data: campaignData,\n      })\n    } catch (error) {\n      if (error instanceof Prisma.PrismaClientValidationError && error.message.includes('Unknown argument `searchMode`')) {\n        console.warn('Prisma client does not yet recognise searchMode field, retrying without it. Consider regenerating Prisma client.')\n\n        const { searchMode, ...fallbackData } = campaignData as typeof campaignData & { searchMode?: string }\n        campaign = await prisma.campaign.create({\n          data: fallbackData,\n        })\n\n        if (searchMode) {\n          await prisma.$executeRaw`\n            UPDATE \"Campaign\"\n            SET \"searchMode\" = ${searchMode}\n            WHERE \"id\" = ${campaign.id}\n          `\n          ;(campaign as any).searchMode = searchMode\n        }\n      } else {\n        throw error\n      }\n    }\n\n    // Generate idempotency key for the job\n    const idempotencyKey = generateIdempotencyKey(campaign.id, 'initial')\n\n    // Create and enqueue campaign job\n    const campaignJob = await prisma.campaignJob.create({\n      data: {\n        campaignId: campaign.id,\n        idempotencyKey,\n        nextRunAt: new Date(),\n      },\n    })\n\n    // Enqueue the job\n    await enqueueJob('lead-fetch', {\n      campaignId: campaign.id,\n      jobId: campaignJob.id,\n      userId: authResult.user.userId,\n    })\n\n    revalidateTag(`user-campaigns:${authResult.user.userId}`)\n\n    return NextResponse.json({\n      success: true,\n      campaign: {\n        id: campaign.id,\n        name: campaign.name,\n        status: 'queued',\n      },\n      jobId: campaignJob.id,\n    }, { status: 201 })\n\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Validation failed', details: error.message },\n        { status: 400 }\n      )\n    }\n\n    console.error('Create campaign error:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const authResult = await verifyAuth(request)\n    if (!authResult.success || !authResult.user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const { searchParams } = new URL(request.url)\n    const pageParam = parseInt(searchParams.get('page') || '1', 10)\n    const limitParam = parseInt(searchParams.get('limit') || '20', 10)\n    const page = Number.isFinite(pageParam) && pageParam > 0 ? pageParam : 1\n    const limit = Number.isFinite(limitParam)\n      ? Math.min(Math.max(limitParam, 1), 100)\n      : 20\n\n    const response = await getCampaignsForUser(authResult.user.userId, { page, limit })\n\n    return NextResponse.json(response, {\n      headers: {\n        'Cache-Control': 'no-store',\n      },\n    })\n\n  } catch (error) {\n    console.error('Get campaigns error:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/dashboard/analytics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/email/outreach/draft/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/email/outreach/jobs/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/email/outreach/send/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/gmail/disconnect/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[184,187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[184,187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used.","line":9,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server'\nimport { Prisma } from '@prisma/client'\n\nimport { verifyAuth } from '@/lib/auth'\nimport { prisma } from '@/lib/prisma'\n\nconst db = prisma as any\n\nexport async function DELETE(request: Request) {\n  const authResult = await verifyAuth()\n  if (!authResult.success || !authResult.user) {\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n  }\n\n  try {\n    await db.gmailAccount.deleteMany({ where: { userId: authResult.user.userId } })\n  } catch (error) {\n    console.error('Gmail disconnect error:', error)\n    if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2021') {\n      return NextResponse.json({ error: 'Gmail tables not found. Run Prisma migrations to create GmailAccount.' }, { status: 503 })\n    }\n    return NextResponse.json({ error: 'Failed to disconnect Gmail account' }, { status: 500 })\n  }\n\n  return NextResponse.json({ success: true })\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/gmail/status/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/google-sheets/[spreadsheetId]/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1434,1437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1434,1437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2161,2164],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2161,2164],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\n\nimport { verifyAuth } from '@/lib/auth'\nimport { prisma } from '@/lib/prisma'\nimport {\n  createAuthorizedClient,\n  getSpreadsheetData,\n  getSpreadsheetInfo,\n  refreshTokenIfNeeded,\n} from '@/lib/google-sheet/google-sheet'\nimport { SpreadsheetData } from '@/types/google-sheet'\n\nexport async function GET(\n  request: NextRequest,\n  context: { params: Promise<{ spreadsheetId: string }> },\n) {\n  try {\n    const authResult = await verifyAuth(request)\n    if (!authResult.success || !authResult.user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const { spreadsheetId } = await context.params\n    const { searchParams } = new URL(request.url)\n    const rangeParam = searchParams.get('range')\n\n    const tokenRecord = await prisma.googleOAuthToken.findUnique({\n      where: { userId: authResult.user.userId },\n    })\n\n    if (!tokenRecord) {\n      return NextResponse.json({ error: 'Google account not connected' }, { status: 400 })\n    }\n\n    const oauth2Client = await createAuthorizedClient(\n      tokenRecord.accessToken,\n      tokenRecord.refreshToken,\n    )\n\n    if (new Date() >= tokenRecord.expiresAt) {\n      await refreshTokenIfNeeded(oauth2Client, tokenRecord, authResult.user.userId)\n    }\n\n    let spreadsheetInfo\n    try {\n      spreadsheetInfo = await getSpreadsheetInfo(oauth2Client, spreadsheetId)\n    } catch (apiError: any) {\n      const status = apiError?.code || apiError?.response?.status\n      if (status === 404) {\n        return NextResponse.json(\n          { error: 'Spreadsheet not found or you do not have access. Verify the Sheet ID and sharing permissions.' },\n          { status: 404 },\n        )\n      }\n      throw apiError\n    }\n\n    const defaultSheetTitle = spreadsheetInfo.sheets?.[0]?.properties?.title || 'Sheet1'\n    const requestedRange = rangeParam || defaultSheetTitle\n    const effectiveRange = requestedRange.includes('!')\n      ? requestedRange\n      : `${requestedRange}!A:P`\n\n    let data: string[][]\n    try {\n      data = await getSpreadsheetData(oauth2Client, spreadsheetId, effectiveRange)\n    } catch (apiError: any) {\n      const status = apiError?.code || apiError?.response?.status\n      if (status === 404) {\n        return NextResponse.json(\n          { error: 'Sheet tab or range not found. Confirm the tab name exists and the range is valid (e.g. \"Leads!A:P\").' },\n          { status: 404 },\n        )\n      }\n      throw apiError\n    }\n\n    await prisma.googleSheet.upsert({\n      where: {\n        userId_spreadsheetId: {\n          userId: authResult.user.userId,\n          spreadsheetId,\n        },\n      },\n      update: {\n        lastUsedAt: new Date(),\n        title: spreadsheetInfo.properties?.title || spreadsheetId,\n        range: effectiveRange,\n      },\n      create: {\n        userId: authResult.user.userId,\n        spreadsheetId,\n        spreadsheetUrl: `https://docs.google.com/spreadsheets/d/${spreadsheetId}`,\n        title: spreadsheetInfo.properties?.title || spreadsheetId,\n        range: effectiveRange,\n        lastUsedAt: new Date(),\n      },\n    })\n\n    const response: SpreadsheetData = {\n      spreadsheet: {\n        properties: {\n          title: spreadsheetInfo.properties?.title || '',\n        },\n        sheets: (spreadsheetInfo.sheets || []).map((sheet) => ({\n          properties: {\n            sheetId: sheet.properties?.sheetId ?? 0,\n            title: sheet.properties?.title || '',\n          },\n        })),\n      },\n      data,\n      sheets:\n        spreadsheetInfo.sheets?.map((sheet) => ({\n          id: sheet.properties?.sheetId ?? 0,\n          title: sheet.properties?.title || '',\n        })) || [],\n    }\n\n    return NextResponse.json(response)\n  } catch (error) {\n    console.error('Get sheet data error:', error)\n    return NextResponse.json({ error: 'Failed to fetch sheet data' }, { status: 500 })\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/google-sheets/clear-tokens/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/google-sheets/disconnect/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/google-sheets/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/google-sheets/status/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/google-sheets/stored/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/init-admin/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/invite-users/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/users/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/api/users/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/dashboard/bookings/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentWeek' is assigned a value but never used.","line":43,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setCurrentWeek' is assigned a value but never used.","line":43,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\nimport { useState } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Calendar, Clock, Video, ExternalLink, ChevronLeft, ChevronRight } from \"lucide-react\"\n\nconst bookings = [\n  {\n    id: 1,\n    name: \"Marco Ruiz\",\n    company: \"FiberNorth\",\n    type: \"Intro Call\",\n    date: \"Sept 1\",\n    time: \"10:00–10:30\",\n    meetingLink: \"https://meet.google.com/abc-defg-hij\",\n    status: \"confirmed\"\n  },\n  {\n    id: 2,\n    name: \"John Smith\", \n    company: \"UtilityCorp\",\n    type: \"Discovery\",\n    date: \"Sept 3\",\n    time: \"14:00–14:45\",\n    meetingLink: \"https://zoom.us/j/123456789\",\n    status: \"confirmed\"\n  }\n]\n\nconst calendarDays = [\n  { day: 1, hasBooking: true, bookings: 1 },\n  { day: 2, hasBooking: false, bookings: 0 },\n  { day: 3, hasBooking: true, bookings: 1 },\n  { day: 4, hasBooking: false, bookings: 0 },\n  { day: 5, hasBooking: false, bookings: 0 },\n  { day: 6, hasBooking: false, bookings: 0 },\n  { day: 7, hasBooking: false, bookings: 0 },\n]\n\nexport default function Bookings() {\n  const [currentWeek, setCurrentWeek] = useState(0)\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-mono font-bold text-foreground\">Bookings</h1>\n        <p className=\"text-muted-text mt-1\">Track and manage scheduled meetings</p>\n      </div>\n\n      <Tabs defaultValue=\"list\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full max-w-md grid-cols-2\">\n          <TabsTrigger value=\"calendar\">Calendar</TabsTrigger>\n          <TabsTrigger value=\"list\">List</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"calendar\" className=\"space-y-6\">\n          {/* Calendar Header */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-lg font-mono\">September 2024</CardTitle>\n                <div className=\"flex gap-2\">\n                  <Button variant=\"outline\" size=\"sm\">\n                    <ChevronLeft className=\"h-4 w-4\" />\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {/* Calendar Grid */}\n              <div className=\"grid grid-cols-7 gap-2 mb-4\">\n                {[\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"].map((day) => (\n                  <div key={day} className=\"text-center text-sm font-medium text-muted-text p-2\">\n                    {day}\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"grid grid-cols-7 gap-2\">\n                {Array.from({ length: 7 }, (_, i) => (\n                  <div key={i} className=\"aspect-square border border-border rounded-md p-1 hover:bg-muted-bg transition-colors\">\n                    <div className=\"text-sm font-mono\">{i + 1}</div>\n                    {calendarDays[i]?.hasBooking && (\n                      <div className=\"mt-1\">\n                        <div className=\"w-2 h-2 bg-cwt-plum rounded-full\"></div>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"list\" className=\"space-y-6\">\n          {/* Upcoming Bookings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg font-mono\">Upcoming Meetings</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {bookings.map((booking) => (\n                  <div key={booking.id} className=\"p-4 border border-border rounded-lg hover:shadow-sm transition-shadow\">\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div>\n                        <h3 className=\"font-medium text-lg\">{booking.name}</h3>\n                        <p className=\"text-muted-text\">{booking.company}</p>\n                      </div>\n                      <Badge variant=\"default\">\n                        {booking.status}\n                      </Badge>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                      <div className=\"flex items-center text-sm\">\n                        <Calendar className=\"h-4 w-4 mr-2 text-cwt-plum\" />\n                        <span>{booking.date}</span>\n                      </div>\n                      <div className=\"flex items-center text-sm\">\n                        <Clock className=\"h-4 w-4 mr-2 text-cwt-plum\" />\n                        <span>{booking.time}</span>\n                      </div>\n                      <div className=\"flex items-center text-sm\">\n                        <Video className=\"h-4 w-4 mr-2 text-cwt-plum\" />\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {booking.type}\n                        </Badge>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"text-sm text-muted-text font-mono truncate flex-1 mr-4\">\n                        {booking.meetingLink}\n                      </div>\n                      <Button variant=\"default\" size=\"sm\">\n                        <ExternalLink className=\"h-4 w-4 mr-2\" />\n                        Join Meeting\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              {bookings.length === 0 && (\n                <div className=\"text-center py-12 text-muted-text\">\n                  <Calendar className=\"h-12 w-12 mx-auto mb-4 text-muted-text/50\" />\n                  <p>No upcoming bookings.</p>\n                  <p className=\"text-sm\">Meetings will appear here when prospects book time.</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Booking Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Card>\n              <CardContent className=\"pt-6 text-center\">\n                <div className=\"text-2xl font-mono font-bold text-cwt-plum\">2</div>\n                <div className=\"text-sm text-muted-text\">This Week</div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"pt-6 text-center\">\n                <div className=\"text-2xl font-mono font-bold text-status-positive\">7</div>\n                <div className=\"text-sm text-muted-text\">This Month</div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"pt-6 text-center\">\n                <div className=\"text-2xl font-mono font-bold text-electric-blue\">85%</div>\n                <div className=\"text-sm text-muted-text\">Show Rate</div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/dashboard/campaigns/campaigns-client.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/dashboard/campaigns/campaigns-skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/dashboard/campaigns/loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/dashboard/campaigns/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/dashboard/dashboard-client.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'analytics'. Either include it or remove the dependency array.","line":210,"column":6,"nodeType":"ArrayExpression","endLine":219,"endColumn":4,"suggestions":[{"desc":"Update the dependencies array to be: [analytics, isLoading, leadTrendChange.label, leadTrendChange.trend, outreachTrendChange.label, outreachTrendChange.trend]","fix":{"range":[6016,6266],"text":"[analytics, isLoading, leadTrendChange.label, leadTrendChange.trend, outreachTrendChange.label, outreachTrendChange.trend]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useMemo } from \"react\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { ArrowDownIcon, ArrowUpIcon, MinusIcon } from \"lucide-react\"\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { LoaderThree } from \"@/components/ui/loader\"\nimport { getApiClient } from \"@/lib/http-client\"\nimport type { DashboardAnalyticsResponse, DashboardActivityItem } from \"@/types/dashboard\"\n\ntype TrendDirection = \"up\" | \"down\" | \"neutral\"\n\ntype KpiMetric = {\n  key: string\n  title: string\n  value: string\n  trend: TrendDirection\n  changeLabel: string\n  description: string\n  muted?: boolean\n}\n\nconst numberFormatter = new Intl.NumberFormat(\"en-US\", {\n  maximumFractionDigits: 0,\n})\n\nconst dayLabelFormatter = new Intl.DateTimeFormat(\"en-US\", {\n  weekday: \"short\",\n})\n\nconst timeFormatter = new Intl.DateTimeFormat(\"en-US\", {\n  hour: \"numeric\",\n  minute: \"2-digit\",\n})\n\nconst formatNumber = (value: number | null | undefined): string => {\n  if (value === null || value === undefined) {\n    return \"—\"\n  }\n  return numberFormatter.format(value)\n}\n\nconst deriveChange = (points: Array<{ count: number }>): { trend: TrendDirection; label: string } => {\n  if (!points || points.length < 2) {\n    return { trend: \"neutral\", label: \"No change\" }\n  }\n  const current = points[points.length - 1]?.count ?? 0\n  const previous = points[points.length - 2]?.count ?? 0\n  const delta = current - previous\n  if (delta === 0) {\n    return { trend: \"neutral\", label: \"No change\" }\n  }\n  const label = `${delta > 0 ? \"+\" : \"\"}${delta.toFixed(0)} vs yesterday`\n  return { trend: delta > 0 ? \"up\" : \"down\", label }\n}\n\nconst trendColor = (trend: TrendDirection) => {\n  switch (trend) {\n    case \"up\":\n      return \"hsl(var(--status-positive))\"\n    case \"down\":\n      return \"hsl(var(--status-bounce))\"\n    default:\n      return \"hsl(var(--status-neutral))\"\n  }\n}\n\nconst trendIcon = (trend: TrendDirection) => {\n  if (trend === \"up\") return <ArrowUpIcon className=\"h-4 w-4\" style={{ color: trendColor(trend) }} />\n  if (trend === \"down\") return <ArrowDownIcon className=\"h-4 w-4\" style={{ color: trendColor(trend) }} />\n  return <MinusIcon className=\"h-4 w-4\" style={{ color: trendColor(trend) }} />\n}\n\nconst getActivityAccent = (type: DashboardActivityItem[\"type\"]) => {\n  switch (type) {\n    case \"email\":\n      return \"hsl(var(--electric-blue))\"\n    case \"campaign\":\n      return \"hsl(var(--cwt-plum))\"\n    case \"lead\":\n    default:\n      return \"hsl(var(--status-positive))\"\n  }\n}\n\nexport function DashboardClient() {\n  const client = useMemo(() => getApiClient(), [])\n\n  const {\n    data: analytics,\n    isLoading,\n    isFetching,\n    error,\n  } = useQuery<DashboardAnalyticsResponse>({\n    queryKey: [\"dashboard-analytics\"],\n    queryFn: async () => {\n      const response = await client.get<DashboardAnalyticsResponse>(\"/api/dashboard/analytics\")\n      return response.data\n    },\n    staleTime: 1000 * 60 * 5,\n    refetchOnWindowFocus: false,\n  })\n\n  const chartData = useMemo(() => {\n    if (!analytics) {\n      return []\n    }\n    const combined = new Map<\n      string,\n      {\n        date: string\n        leadCount: number\n        outreachCount: number\n      }\n    >()\n\n    analytics.trends.leadWrites.forEach((point) => {\n      combined.set(point.date, {\n        date: point.date,\n        leadCount: point.count,\n        outreachCount: 0,\n      })\n    })\n\n    analytics.trends.outreachSends.forEach((point) => {\n      const existing = combined.get(point.date)\n      if (existing) {\n        existing.outreachCount = point.count\n      } else {\n        combined.set(point.date, {\n          date: point.date,\n          leadCount: 0,\n          outreachCount: point.count,\n        })\n      }\n    })\n\n    return Array.from(combined.values()).sort((a, b) => a.date.localeCompare(b.date))\n  }, [analytics])\n\n  const maxChartValue = useMemo(() => {\n    if (chartData.length === 0) {\n      return 1\n    }\n    return chartData.reduce((max, point) => {\n      return Math.max(max, point.leadCount, point.outreachCount)\n    }, 1)\n  }, [chartData])\n\n  const leadTrendChange = useMemo(\n    () => deriveChange(analytics?.trends.leadWrites ?? []),\n    [analytics?.trends.leadWrites],\n  )\n\n  const outreachTrendChange = useMemo(\n    () => deriveChange(analytics?.trends.outreachSends ?? []),\n    [analytics?.trends.outreachSends],\n  )\n\n  const kpiMetrics: KpiMetric[] = useMemo(() => {\n    return [\n      {\n        key: \"leads\",\n        title: \"New Leads\",\n        value: formatNumber(analytics?.metrics.leadsWritten ?? (isLoading ? null : 0)),\n        trend: leadTrendChange.trend,\n        changeLabel: isLoading ? \"Loading…\" : leadTrendChange.label,\n        description: \"Leads written to Google Sheets\",\n      },\n      {\n        key: \"outreach\",\n        title: \"Outreached Emails\",\n        value: formatNumber(analytics?.metrics.outreachEmailsSent ?? (isLoading ? null : 0)),\n        trend: outreachTrendChange.trend,\n        changeLabel: isLoading ? \"Loading…\" : outreachTrendChange.label,\n        description: \"Sent via manual outreach\",\n      },\n      {\n        key: \"replies\",\n        title: \"Replies\",\n        value: \"0\",\n        trend: \"neutral\",\n        changeLabel: \"Tracking coming soon\",\n        description: \"Reply sync is being configured\",\n        muted: true,\n      },\n      {\n        key: \"bookings\",\n        title: \"Bookings\",\n        value: \"0\",\n        trend: \"neutral\",\n        changeLabel: \"Sync coming soon\",\n        description: \"Calendar integration pending\",\n        muted: true,\n      },\n      {\n        key: \"users\",\n        title: \"Active Users\",\n        value: formatNumber(analytics?.metrics.userCount ?? (analytics ? null : 0)),\n        trend: \"neutral\",\n        changeLabel:\n          analytics?.metrics.userCount === null ? \"Admin only\" : \"Synced from Users directory\",\n        description:\n          analytics?.metrics.userCount === null\n            ? \"Admins can view the user directory\"\n            : \"Total users with dashboard access\",\n      },\n    ]\n  }, [\n    analytics?.metrics.leadsWritten,\n    analytics?.metrics.outreachEmailsSent,\n    analytics?.metrics.userCount,\n    isLoading,\n    leadTrendChange.label,\n    leadTrendChange.trend,\n    outreachTrendChange.label,\n    outreachTrendChange.trend,\n  ])\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-mono font-bold text-foreground\">Dashboard</h1>\n        <p className=\"text-muted-foreground mt-1\">System overview and performance metrics</p>\n      </div>\n\n      {error ? (\n        <div className=\"rounded-md border border-destructive/50 bg-destructive/10 p-4 text-sm text-destructive\">\n          Unable to load analytics right now. Please try again shortly.\n        </div>\n      ) : null}\n\n      <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-5\">\n        {kpiMetrics.map((metric) => (\n          <Card key={metric.key}>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0\">\n              <CardTitle\n                className={`text-sm font-medium ${metric.muted ? \"text-muted-foreground/70\" : \"text-muted-foreground\"}`}\n              >\n                {metric.title}\n              </CardTitle>\n              {!metric.muted ? trendIcon(metric.trend) : null}\n            </CardHeader>\n            <CardContent>\n              <div\n                className={`text-2xl font-mono font-bold ${metric.muted ? \"text-muted-foreground\" : \"text-foreground\"}`}\n              >\n                {metric.value}\n              </div>\n              <div\n                className={`text-xs ${metric.muted ? \"text-muted-foreground/80\" : \"\"}`}\n                style={{ color: metric.muted ? undefined : trendColor(metric.trend) }}\n              >\n                {metric.changeLabel}\n              </div>\n              <div className=\"mt-1 text-xs text-muted-foreground\">{metric.description}</div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"grid grid-cols-1 gap-6 lg:grid-cols-2\">\n        <Card>\n          <CardHeader className=\"flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between\">\n            <div>\n              <CardTitle className=\"text-lg font-mono\">Pipeline over time</CardTitle>\n              <p className=\"text-xs text-muted-foreground\">\n                Leads written to sheets vs outreach emails over the last 7 days.\n              </p>\n            </div>\n            {isFetching ? (\n              <span className=\"text-xs font-mono uppercase text-muted-foreground\">Refreshing…</span>\n            ) : null}\n          </CardHeader>\n          <CardContent>\n            {isLoading || !analytics ? (\n              <div className=\"flex h-64 flex-col items-center justify-center gap-3 text-sm text-muted-foreground\">\n                <LoaderThree />\n                Loading analytics…\n              </div>\n            ) : (\n              <>\n                <div className=\"h-64 flex items-end justify-between space-x-3 px-2\">\n                  {chartData.map((point) => {\n                    const leadHeight = Math.round((point.leadCount / maxChartValue) * 100)\n                    const outreachHeight = Math.round((point.outreachCount / maxChartValue) * 100)\n                    const date = new Date(point.date)\n                    const label = dayLabelFormatter.format(date)\n                    return (\n                      <div key={point.date} className=\"flex flex-1 flex-col items-center gap-2\">\n                        <div className=\"flex h-full w-full items-end gap-1\">\n                          <div\n                            className=\"flex-1 rounded-sm bg-muted\"\n                            title={`${point.leadCount} leads on ${label}`}\n                          >\n                            <div\n                              className=\"w-full rounded-sm\"\n                              style={{\n                                height: `${leadHeight}%`,\n                                backgroundColor: \"hsl(var(--cwt-plum))\",\n                              }}\n                            />\n                          </div>\n                          <div\n                            className=\"flex-1 rounded-sm bg-muted\"\n                            title={`${point.outreachCount} emails on ${label}`}\n                          >\n                            <div\n                              className=\"w-full rounded-sm\"\n                              style={{\n                                height: `${outreachHeight}%`,\n                                backgroundColor: \"hsl(var(--electric-blue))\",\n                              }}\n                            />\n                          </div>\n                        </div>\n                        <div className=\"text-xs font-mono text-muted-foreground\">{label}</div>\n                      </div>\n                    )\n                  })}\n                </div>\n                <div className=\"mt-4 flex flex-wrap items-center gap-4 text-xs text-muted-foreground\">\n                  <div className=\"flex items-center gap-2\">\n                    <span\n                      className=\"inline-block h-2 w-2 rounded-full\"\n                      style={{ backgroundColor: \"hsl(var(--cwt-plum))\" }}\n                    />\n                    Leads written\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span\n                      className=\"inline-block h-2 w-2 rounded-full\"\n                      style={{ backgroundColor: \"hsl(var(--electric-blue))\" }}\n                    />\n                    Emails sent\n                  </div>\n                </div>\n              </>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg font-mono\">Live activity</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading || !analytics ? (\n              <div className=\"flex h-64 flex-col items-center justify-center gap-3 text-sm text-muted-foreground\">\n                <LoaderThree />\n                Loading activity…\n              </div>\n            ) : analytics.activity.length === 0 ? (\n              <div className=\"rounded-md border border-dashed border-border bg-muted/30 p-6 text-sm text-muted-foreground\">\n                No recent activity yet. Run a campaign or send outreach to see live updates.\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {analytics.activity.map((item) => {\n                  const occurred = new Date(item.occurredAt)\n                  return (\n                    <div key={item.id} className=\"flex items-start gap-3\">\n                      <div className=\"text-sm font-mono text-muted-foreground min-w-[3.5rem]\">\n                        {timeFormatter.format(occurred)}\n                      </div>\n                      <div\n                        className=\"mt-1 h-2 w-2 rounded-full\"\n                        style={{ backgroundColor: getActivityAccent(item.type) }}\n                      />\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"text-sm font-medium text-foreground\">{item.title}</div>\n                        <div className=\"text-xs text-muted-foreground truncate\">{item.description}</div>\n                      </div>\n                    </div>\n                  )\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/dashboard/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/dashboard/leads/components/FastSpinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/dashboard/leads/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PencilLine' is defined but never used.","line":7,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'X' is defined but never used.","line":7,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":63},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'previewEditing' is assigned a value but never used.","line":138,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":138,"endColumn":24},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'outreachedJobs' logical expression could make the dependencies of useMemo Hook (at line 544) change on every render. To fix this, wrap the initialization of 'outreachedJobs' in its own useMemo() Hook.","line":169,"column":9,"nodeType":"VariableDeclarator","endLine":169,"endColumn":67},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'outreachedJobs' logical expression could make the dependencies of useCallback Hook (at line 656) change on every render. To fix this, wrap the initialization of 'outreachedJobs' in its own useMemo() Hook.","line":169,"column":9,"nodeType":"VariableDeclarator","endLine":169,"endColumn":67},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'react-hooks/exhaustive-deps').","line":220,"column":5,"severity":1,"nodeType":null,"fix":{"range":[7992,8047],"text":" "}},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setSheetsError'. Either include it or remove the dependency array.","line":374,"column":5,"nodeType":"ArrayExpression","endLine":374,"endColumn":7,"suggestions":[{"desc":"Update the dependencies array to be: [setSheetsError]","fix":{"range":[12380,12382],"text":"[setSheetsError]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'outreachDraft' is assigned a value but never used.","line":591,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":591,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'previewLead' is assigned a value but never used.","line":592,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":592,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'startEditingPreview' is assigned a value but never used.","line":913,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":913,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cancelEditingPreview' is assigned a value but never used.","line":922,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":922,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'saveEditedPreview' is assigned a value but never used.","line":933,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":933,"endColumn":26}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkConnectionStatus'. Either include it or remove the dependency array.","line":443,"column":6,"nodeType":"ArrayExpression","endLine":443,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [checkConnectionStatus]","fix":{"range":[14178,14180],"text":"[checkConnectionStatus]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":1,"source":"\"use client\"\n\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\"\nimport type { ChangeEvent } from \"react\"\nimport axios, { CancelTokenSource } from \"axios\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { Search, Send, Eye, RefreshCw, Download, PencilLine, X, UploadCloud } from \"lucide-react\"\nimport { toast } from \"sonner\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Input } from \"@/components/ui/input\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\"\n\nimport { ErrorAlert } from \"@/components/google-sheet/ErrorAlert\"\n\nimport { useGoogleSheets } from \"@/hooks/useGoogleSheet\"\nimport { useGmail } from \"@/hooks/useGmail\"\nimport {\n  DraftRecord,\n  ManualOutreachSource,\n  OutreachedJob,\n  OutreachMode,\n  SheetLead,\n} from \"@/types/outreach\"\nimport { SpreadsheetData } from \"@/types/google-sheet\"\nimport { jobStatusVariant, parseSheet, statusVariant } from \"@/lib/leads/outreach\"\nimport { formatEmailBody } from \"@/lib/email/format\"\nimport { cn } from \"@/lib/utils\"\nimport { FastSpinner } from \"./components/FastSpinner\"\n\ntype ChatMessage = {\n  id: string\n  role: \"user\" | \"assistant\"\n  content: string\n  status?: \"loading\" | \"error\" | \"success\"\n}\n\ntype WizardStep = 1 | 2 | 3\n\ntype OutreachSourceType = \"google-sheet\" | \"file-upload\"\n\nconst SOURCE_OPTIONS: Array<{ value: OutreachSourceType; label: string; description: string }> = [\n  {\n    value: \"google-sheet\",\n    label: \"Google Sheet\",\n    description: \"Use a connected Google Sheet. We’ll fetch the latest rows each time you launch outreach.\",\n  },\n  {\n    value: \"file-upload\",\n    label: \"Upload file\",\n    description: \"Upload a CSV or Excel file. We’ll extract emails, names, titles, and companies automatically.\",\n  },\n]\n\nconst htmlToPlainText = (html: string): string =>\n  html\n    .replace(/<\\/p>/gi, \"\\n\\n\")\n    .replace(/<br\\s*\\/?\\s*>/gi, \"\\n\")\n    .replace(/<[^>]+>/g, \"\")\n    .replace(/\\n{3,}/g, \"\\n\\n\")\n    .trim()\n\ntype PersistedWorkflowState = {\n  campaignName: string\n  manualCampaignId: string | null\n  sourceType: OutreachSourceType | null\n  currentStep: WizardStep\n  selectedSheetId: string\n  sheetRange: string\n  leads: SheetLead[]\n  promptInput: string\n  chatMessages: ChatMessage[]\n  drafts: Record<string, DraftRecord>\n  sendingMode: OutreachMode\n  uploadedFileMeta: { name: string; importedAt: number; rowCount: number } | null\n  lastUpdated: number\n}\n\nconst LOCAL_STORAGE_KEY = \"outbond.dashboard.outreach\"\n\ntype ManualCampaignGroup = {\n  id: string\n  name: string\n  source: ManualOutreachSource | null\n  sentCount: number\n  totalCount: number\n  lastSentAt: string | null\n  jobs: OutreachedJob[]\n}\n\nconst generateManualCampaignId = () => {\n  if (typeof crypto !== \"undefined\" && typeof crypto.randomUUID === \"function\") {\n    return crypto.randomUUID()\n  }\n  return `outreach-${Date.now()}-${Math.random().toString(36).slice(2, 10)}`\n}\n\nexport default function Leads() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [sendingMode, setSendingMode] = useState<OutreachMode>(\"single\")\n  const [selectedSheetId, setSelectedSheetId] = useState<string>(\"\")\n  const [sheetRange, setSheetRange] = useState(\"\")\n  const [leads, setLeads] = useState<SheetLead[]>([])\n  const [drafts, setDrafts] = useState<Record<string, DraftRecord>>({})\n  const [promptInput, setPromptInput] = useState(\"\")\n  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([])\n  const [isGeneratingFromPrompt, setIsGeneratingFromPrompt] = useState(false)\n  const [sendingEmails, setSendingEmails] = useState(false)\n  const [sendingLeadEmail, setSendingLeadEmail] = useState<string | null>(null)\n  const [bulkDialogOpen, setBulkDialogOpen] = useState(false)\n\n  const [campaignName, setCampaignName] = useState(\"\")\n  const [manualCampaignId, setManualCampaignId] = useState<string | null>(null)\n  const [sourceType, setSourceType] = useState<OutreachSourceType | null>(null)\n  const [currentStep, setCurrentStep] = useState<WizardStep>(1)\n  const [wizardOpen, setWizardOpen] = useState(false)\n  const [importingLeads, setImportingLeads] = useState(false)\n  const [sourceError, setSourceError] = useState<string | null>(null)\n  const [uploadedFileMeta, setUploadedFileMeta] = useState<{ name: string; importedAt: number; rowCount: number } | null>(null)\n  const [resumeReady, setResumeReady] = useState(false)\n\n  const [previewEmail, setPreviewEmail] = useState<string | null>(null)\n  const [previewJob, setPreviewJob] = useState<OutreachedJob | null>(null)\n  const [selectedCampaign, setSelectedCampaign] = useState<ManualCampaignGroup | null>(null)\n  const [previewEditing, setPreviewEditing] = useState(false)\n  const [editedSubject, setEditedSubject] = useState(\"\")\n  const [editedBody, setEditedBody] = useState(\"\")\n\n  const generateCancelSourceRef = useRef<CancelTokenSource | null>(null)\n  const sendCancelSourceRef = useRef<CancelTokenSource | null>(null)\n  const fileInputRef = useRef<HTMLInputElement | null>(null)\n\n  const {\n    data: outreachedJobsData,\n    isLoading: jobsInitialLoading,\n    isFetching: jobsFetching,\n    refetch: refetchOutreachJobs,\n    error: outreachJobsError,\n  } = useQuery<OutreachedJob[], Error>({\n    queryKey: [\"outreachJobs\"],\n    queryFn: async () => {\n      const response = await axios.get<{ jobs: OutreachedJob[] }>(\"/api/email/outreach/jobs\")\n      return response.data.jobs ?? []\n    },\n    staleTime: 1000 * 60,\n    retry: 1,\n    refetchOnWindowFocus: false,\n  })\n\n  useEffect(() => {\n    if (outreachJobsError) {\n      toast.error(\"Failed to load outreached emails\")\n    }\n  }, [outreachJobsError])\n\n  const outreachedJobs: OutreachedJob[] = outreachedJobsData ?? []\n  const jobsLoading = jobsInitialLoading || jobsFetching\n\n  const createCancelSource = useCallback((holder: { current: CancelTokenSource | null }, reason = 'Cancelled due to a new request') => {\n    if (holder.current) {\n      holder.current.cancel(reason)\n    }\n    const nextSource = axios.CancelToken.source()\n    holder.current = nextSource\n    return nextSource\n  }, [])\n\n  const hasHydratedRef = useRef(false)\n\n  useEffect(() => {\n    if (typeof window === \"undefined\" || hasHydratedRef.current) {\n      return\n    }\n    hasHydratedRef.current = true\n\n    try {\n      const stored = window.localStorage.getItem(LOCAL_STORAGE_KEY)\n      if (!stored) {\n        setResumeReady(true)\n        return\n      }\n      const parsed = JSON.parse(stored) as Partial<PersistedWorkflowState> | null\n      if (!parsed) {\n        setResumeReady(true)\n        return\n      }\n\n      setCampaignName(parsed.campaignName ?? \"\")\n      setManualCampaignId(parsed.manualCampaignId ?? null)\n      setSourceType(parsed.sourceType ?? null)\n      setCurrentStep((parsed.currentStep ?? 1) as WizardStep)\n      setSelectedSheetId(parsed.selectedSheetId ?? \"\")\n      setSheetRange(parsed.sheetRange ?? \"\")\n      setLeads(Array.isArray(parsed.leads) ? parsed.leads : [])\n      setPromptInput(parsed.promptInput ?? \"\")\n      setChatMessages(Array.isArray(parsed.chatMessages) ? parsed.chatMessages : [])\n      setDrafts(parsed.drafts ?? {})\n      setSendingMode(parsed.sendingMode ?? \"single\")\n      setUploadedFileMeta(parsed.uploadedFileMeta ?? null)\n    } catch (error) {\n      console.error(\"Failed to restore outreach workflow:\", error)\n      toast.error(\"We couldn't resume your last outreach session. Starting fresh.\")\n      window.localStorage.removeItem(LOCAL_STORAGE_KEY)\n    } finally {\n      setResumeReady(true)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    if (!resumeReady || typeof window === \"undefined\") {\n      return\n    }\n    const payload: PersistedWorkflowState = {\n      campaignName,\n      manualCampaignId,\n      sourceType,\n      currentStep,\n      selectedSheetId,\n      sheetRange,\n      leads,\n      promptInput,\n      chatMessages,\n      drafts,\n      sendingMode,\n      uploadedFileMeta,\n      lastUpdated: Date.now(),\n    }\n    try {\n      window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(payload))\n    } catch (error) {\n      console.error(\"Failed to persist outreach workflow:\", error)\n    }\n  }, [\n    campaignName,\n    manualCampaignId,\n    sourceType,\n    currentStep,\n    selectedSheetId,\n    sheetRange,\n    leads,\n    promptInput,\n    chatMessages,\n    drafts,\n    sendingMode,\n    uploadedFileMeta,\n    resumeReady,\n  ])\n\n  const handleFileUpload = useCallback(\n    async (file: File) => {\n      setImportingLeads(true)\n      setSourceError(null)\n      setLeads([])\n      setDrafts({})\n      setChatMessages([])\n      setPromptInput(\"\")\n      try {\n        const arrayBuffer = await file.arrayBuffer()\n        const XLSX = await import(\"xlsx\")\n        const workbook = XLSX.read(arrayBuffer, { type: \"array\" })\n        const sheetName = workbook.SheetNames[0]\n        if (!sheetName) {\n          throw new Error(\"No sheets were found in that file.\")\n        }\n        const worksheet = workbook.Sheets[sheetName]\n        if (!worksheet) {\n          throw new Error(\"Unable to read the first sheet in that file.\")\n        }\n        const rawRows = XLSX.utils.sheet_to_json<(string | number | null)[]>(worksheet, {\n          header: 1,\n          blankrows: false,\n          defval: \"\",\n        })\n        const normalizedRows = rawRows.map((row) =>\n          Array.isArray(row) ? row.map((value) => value?.toString().trim() ?? \"\") : [],\n        )\n        if (normalizedRows.length === 0) {\n          throw new Error(\"The uploaded file is empty.\")\n        }\n        const spreadsheetData: SpreadsheetData = {\n          spreadsheet: {\n            properties: { title: file.name },\n            sheets: [\n              {\n                properties: {\n                  sheetId: 0,\n                  title: sheetName,\n                },\n              },\n            ],\n          },\n          data: normalizedRows as string[][],\n          sheets: [{ id: 0, title: sheetName }],\n        }\n        const parsedLeads = parseSheet(spreadsheetData)\n        if (!parsedLeads.length) {\n          throw new Error(\"We couldn't find any leads with email addresses in that file.\")\n        }\n        setLeads(\n          parsedLeads.map((lead, index) => ({\n            ...lead,\n            sourceRowRef: lead.sourceRowRef ?? String(index + 2),\n          })),\n        )\n        setUploadedFileMeta({\n          name: file.name,\n          importedAt: Date.now(),\n          rowCount: parsedLeads.length,\n        })\n        toast.success(`Loaded ${parsedLeads.length} leads from ${file.name}`)\n      } catch (error) {\n        console.error(\"Upload parse error:\", error)\n        const message =\n          error instanceof Error && error.message\n            ? error.message\n            : \"Failed to read the uploaded file. Make sure it includes a header row with an Email column.\"\n        setSourceError(message)\n        toast.error(message)\n        setUploadedFileMeta(null)\n      } finally {\n        setImportingLeads(false)\n        if (fileInputRef.current) {\n          fileInputRef.current.value = \"\"\n        }\n      }\n    },\n    [],\n  )\n\n  const handleFileInputChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      const file = event.target.files?.[0]\n      if (!file) return\n      void handleFileUpload(file)\n    },\n    [handleFileUpload],\n  )\n\n  const handleSourceTypeChange = useCallback(\n    (next: OutreachSourceType) => {\n      setSourceType((previous) => {\n        if (previous === next) {\n          return previous\n        }\n        return next\n      })\n      generateCancelSourceRef.current?.cancel(\"Source changed\")\n      setLeads([])\n      setDrafts({})\n      setChatMessages([])\n      setPromptInput(\"\")\n      setSourceError(null)\n      setUploadedFileMeta(null)\n      setSheetsError(null)\n      if (next !== \"google-sheet\") {\n        setSelectedSheetId(\"\")\n        setSheetRange(\"\")\n      }\n    },\n    [],\n  )\n\n  const setStep = useCallback((next: WizardStep) => {\n    setCurrentStep(() => {\n      if (next < 1) return 1\n      if (next > 3) return 3\n      return next\n    })\n  }, [])\n\n  const hasLeads = leads.length > 0\n  const hasDrafts = Object.keys(drafts).length > 0\n\n  const handleStep1Continue = useCallback(() => {\n    const trimmedName = campaignName.trim()\n    if (!trimmedName) {\n      setSourceError('Give this outreach a name before continuing.')\n      return\n    }\n    if (!sourceType) {\n      setSourceError('Choose where your leads should come from.')\n      return\n    }\n    if (leads.length === 0) {\n      setSourceError('Load leads before moving to the next step.')\n      return\n    }\n    if (!manualCampaignId) {\n      setManualCampaignId(generateManualCampaignId())\n    }\n    setCampaignName(trimmedName)\n    setSourceError(null)\n    setStep(2)\n  }, [campaignName, sourceType, leads.length, manualCampaignId, setStep])\n\n  const handleStep2Continue = useCallback(() => {\n    if (!hasDrafts) {\n      setSourceError('Generate drafts for your leads before reviewing them.')\n      return\n    }\n    setSourceError(null)\n    setStep(3)\n  }, [hasDrafts, setStep])\n\n  useEffect(() => {\n    return () => {\n      generateCancelSourceRef.current?.cancel('Component unmounted')\n      sendCancelSourceRef.current?.cancel('Component unmounted')\n    }\n  }, [])\n\n  const {\n    spreadsheets,\n    selectedSheet,\n    hasFetchedSpreadsheets,\n    loading: sheetsLoading,\n    error: sheetsError,\n    setError: setSheetsError,\n    checkConnectionStatus,\n    fetchSpreadsheets,\n    fetchSheetData,\n  } = useGoogleSheets()\n\n  const { status: gmailStatus } = useGmail()\n\n  useEffect(() => {\n    checkConnectionStatus().catch(() => undefined)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    if (sourceType !== \"google-sheet\") return\n    if (selectedSheetId) return\n    if (spreadsheets.length > 0) {\n      setSelectedSheetId(spreadsheets[0].id)\n    }\n  }, [selectedSheetId, sourceType, spreadsheets])\n\n  useEffect(() => {\n    if (sourceType !== \"google-sheet\") {\n      return\n    }\n    if (!selectedSheet) {\n      setLeads([])\n      setDrafts({})\n      setChatMessages([])\n      setPromptInput(\"\")\n      return\n    }\n    const leads = parseSheet(selectedSheet)\n    setLeads(leads)\n    setDrafts({})\n    setChatMessages([])\n    setPromptInput(\"\")\n    setSheetsError(null)\n  }, [selectedSheet, setSheetsError, sourceType])\n\n  useEffect(() => {\n    if (!previewEmail) {\n      setPreviewEditing(false)\n      return\n    }\n    const draft = drafts[previewEmail]\n    if (!draft) {\n      setPreviewEditing(false)\n      return\n    }\n    setEditedSubject(draft.subject)\n    setEditedBody(draft.bodyText || \"\")\n    setPreviewEditing(false)\n  }, [previewEmail, drafts])\n\n  const filteredLeads = leads.filter((lead) => {\n    if (!searchTerm.trim()) return true\n    const searchLower = searchTerm.toLowerCase()\n    const first = (lead.firstName ?? '').toLowerCase()\n    const last = (lead.lastName ?? '').toLowerCase()\n    const fullName = `${first} ${last}`.trim()\n    const nameMatches = fullName.includes(searchLower)\n    const companyMatches = (lead.company ?? '').toLowerCase().includes(searchLower)\n    const emailMatches = lead.email.toLowerCase().includes(searchLower)\n    return nameMatches || companyMatches || emailMatches\n  })\n\n  const { manualCampaigns, legacyJobs } = useMemo(() => {\n    const map = new Map<string, ManualCampaignGroup>()\n    const legacy: OutreachedJob[] = []\n    outreachedJobs.forEach((job) => {\n      if (job.manualCampaignId) {\n        const id = job.manualCampaignId\n        const lastTimestamp = job.sentAt ?? job.createdAt\n        const status = job.status?.toUpperCase() ?? \"\"\n        if (map.has(id)) {\n          const group = map.get(id)!\n          group.totalCount += 1\n          if (status === \"SENT\") {\n            group.sentCount += 1\n          }\n          group.jobs.push(job)\n          if (!group.lastSentAt || new Date(lastTimestamp).getTime() > new Date(group.lastSentAt).getTime()) {\n            group.lastSentAt = lastTimestamp\n          }\n          if (job.manualCampaignSource && !group.source) {\n            group.source = job.manualCampaignSource\n          }\n          if (job.manualCampaignName) {\n            group.name = job.manualCampaignName\n          }\n        } else {\n          map.set(id, {\n            id,\n            name: job.manualCampaignName ?? \"Untitled Outreach\",\n            source: job.manualCampaignSource ?? null,\n            sentCount: status === \"SENT\" ? 1 : 0,\n            totalCount: 1,\n            lastSentAt: lastTimestamp,\n            jobs: [job],\n          })\n        }\n      } else {\n        legacy.push(job)\n      }\n    })\n    const campaigns = Array.from(map.values()).sort((a, b) => {\n      const aTime = a.lastSentAt ? new Date(a.lastSentAt).getTime() : 0\n      const bTime = b.lastSentAt ? new Date(b.lastSentAt).getTime() : 0\n      return bTime - aTime\n    })\n    return { manualCampaigns: campaigns, legacyJobs: legacy }\n  }, [outreachedJobs])\n\n  const filteredCampaigns = useMemo(() => {\n    if (!searchTerm.trim()) return manualCampaigns\n    const query = searchTerm.toLowerCase()\n    return manualCampaigns.filter((campaign) => {\n      if (campaign.name.toLowerCase().includes(query)) {\n        return true\n      }\n      return campaign.jobs.some((job) => {\n        const fields = [\n          job.leadEmail,\n          job.leadFirstName ?? '',\n          job.leadLastName ?? '',\n          job.leadCompany ?? '',\n          job.subject,\n          job.manualCampaignName ?? '',\n        ]\n        return fields.some((value) => value?.toLowerCase().includes(query))\n      })\n    })\n  }, [manualCampaigns, searchTerm])\n\n  const filteredLegacyJobs = useMemo(() => {\n    if (!searchTerm.trim()) return legacyJobs\n    const query = searchTerm.toLowerCase()\n    return legacyJobs.filter((job) => {\n      const fields = [\n        job.leadEmail,\n        job.leadFirstName ?? '',\n        job.leadLastName ?? '',\n        job.leadCompany ?? '',\n        job.subject,\n      ]\n      return fields.some((value) => value?.toLowerCase().includes(query))\n    })\n  }, [legacyJobs, searchTerm])\n\n  const pendingBulkEmails = useMemo(\n    () =>\n      Object.entries(drafts)\n        .filter(([, draft]) => draft.status === 'pending')\n        .map(([email]) => email),\n    [drafts],\n  )\n  const pendingDraftCount = pendingBulkEmails.length\n\n  const outreachDraft = previewEmail ? drafts[previewEmail] : null\n  const previewLead = useMemo(() => leads.find((lead) => lead.email === previewEmail), [previewEmail, leads])\n\n  const handleSheetSelectOpen = useCallback((open: boolean) => {\n    if (open && !hasFetchedSpreadsheets && !sheetsLoading) {\n      fetchSpreadsheets().catch(() => undefined)\n    }\n  }, [fetchSpreadsheets, hasFetchedSpreadsheets, sheetsLoading])\n\n  const handleExportOutreachedCsv = useCallback(\n    (jobsToExport?: OutreachedJob[], options?: { fileLabel?: string }) => {\n      const sourceJobs: OutreachedJob[] = jobsToExport ?? outreachedJobs\n      if (!sourceJobs.length || typeof window === 'undefined') {\n        return\n      }\n\n      const headers = [\n        'Email',\n        'First Name',\n        'Last Name',\n        'Company',\n        'Subject',\n        'Status',\n        'Sent At',\n        'Created At',\n        'Body HTML',\n        'Body Text',\n      ]\n\n      const escape = (value: string | null | undefined) => {\n        const stringValue = value ?? ''\n        const escaped = stringValue.replace(/\"/g, '\"\"')\n        return `\"${escaped}\"`\n      }\n\n      const rows = sourceJobs.map((job): string[] => [\n        escape(job.leadEmail),\n        escape(job.leadFirstName ?? ''),\n        escape(job.leadLastName ?? ''),\n        escape(job.leadCompany ?? ''),\n        escape(job.subject),\n        escape(job.status),\n        escape(job.sentAt ? new Date(job.sentAt).toISOString() : ''),\n        escape(new Date(job.createdAt).toISOString()),\n        escape(job.bodyHtml),\n        escape(job.bodyText ?? ''),\n      ])\n\n      const csvRows = [\n        headers.map((header) => escape(header)).join(','),\n        ...rows.map((row) => row.join(',')),\n      ]\n      const csv = csvRows.join('\\n')\n\n      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' })\n      const url = window.URL.createObjectURL(blob)\n      const link = document.createElement('a')\n      const label = options?.fileLabel ?? (jobsToExport && jobsToExport[0]?.manualCampaignName) ?? 'outreached-emails'\n      link.href = url\n      link.download = `${label}-${new Date().toISOString()}.csv`\n      document.body.appendChild(link)\n      link.click()\n      document.body.removeChild(link)\n      window.URL.revokeObjectURL(url)\n    },\n    [outreachedJobs],\n  )\n\n  const handleLoadSheet = async () => {\n    if (!selectedSheetId) {\n      setSheetsError('Please choose a Google Sheet first')\n      return\n    }\n    const trimmedRange = sheetRange.trim()\n    const rangeToUse = trimmedRange.length > 0 ? trimmedRange : undefined\n    const data = await fetchSheetData(selectedSheetId, rangeToUse)\n    if (data?.sheets?.length) {\n      const firstTab = data.sheets[0]?.title || 'Sheet1'\n      if (!rangeToUse) {\n        setSheetRange(`${firstTab}!A:P`)\n      }\n    }\n  }\n\n  const handlePromptSubmit = async () => {\n    const trimmedPrompt = promptInput.trim()\n    if (!leads.length) {\n      setSourceError('Load leads before generating drafts')\n      setSheetsError(null)\n      toast.error('Load leads first')\n      return\n    }\n    if (!trimmedPrompt) {\n      setSourceError('Add a prompt so the AI knows what to write')\n      toast.error('Describe the outreach email you want before generating drafts')\n      return\n    }\n    if (leads.length > 50) {\n      const message = 'The outreach generator can handle up to 50 leads per batch. Narrow your range before continuing.'\n      setSourceError(message)\n      toast.error(message)\n      return\n    }\n\n    const userMessageId = `user-${Date.now()}`\n    const assistantMessageId = `assistant-${Date.now()}`\n    setChatMessages((prev) => [\n      ...prev,\n      { id: userMessageId, role: \"user\", content: trimmedPrompt },\n      { id: assistantMessageId, role: \"assistant\", content: \"Working on your request…\", status: \"loading\" },\n    ])\n    setPromptInput(\"\")\n    setIsGeneratingFromPrompt(true)\n    setDrafts({})\n    setSourceError(null)\n\n    let cancelSource: CancelTokenSource | null = null\n    try {\n      cancelSource = createCancelSource(generateCancelSourceRef)\n      const response = await axios.post<{ drafts: Array<{ email: string; subject: string; bodyHtml: string; bodyText: string }> }>(\n        '/api/email/outreach/draft',\n        {\n          leads: leads.map((lead) => ({\n            email: lead.email,\n            firstName: lead.firstName,\n            lastName: lead.lastName,\n            company: lead.company,\n            summary: lead.summary,\n            role: lead.role,\n          })),\n          sender: {\n            name: gmailStatus?.emailAddress?.split('@')[0] || undefined,\n            prompt: trimmedPrompt,\n          },\n        },\n        { cancelToken: cancelSource.token },\n      )\n\n      const generated = response.data.drafts ?? []\n      if (!generated.length) {\n        setChatMessages((prev) =>\n          prev.map((message) =>\n            message.id === assistantMessageId\n              ? { ...message, status: \"error\", content: \"I couldn't generate any drafts. Try adjusting your prompt and run it again.\" }\n              : message,\n          ),\n        )\n        toast.error('No drafts were generated. Try refining your prompt.')\n        return\n      }\n\n      const nextDrafts = generated.reduce<Record<string, DraftRecord>>((acc, item) => {\n        if (!item.email) return acc\n        acc[item.email] = {\n          subject: item.subject.trim(),\n          bodyHtml: item.bodyHtml,\n          bodyText: item.bodyText,\n          status: 'pending',\n        }\n        return acc\n      }, {})\n\n      setDrafts(nextDrafts)\n\n      const missingCount = leads.length - generated.length\n      const summary =\n        missingCount > 0\n          ? `Generated ${generated.length} drafts. ${missingCount} lead${missingCount === 1 ? '' : 's'} were skipped—check their data and try again if needed.`\n          : `Generated drafts for all ${generated.length} leads.`\n\n      setChatMessages((prev) =>\n        prev.map((message) =>\n          message.id === assistantMessageId\n            ? { ...message, status: \"success\", content: summary }\n            : message,\n        ),\n      )\n      toast.success(`Prepared ${generated.length} drafts`)\n    } catch (error) {\n      if (axios.isCancel(error)) {\n        setChatMessages((prev) => prev.filter((message) => message.id !== assistantMessageId))\n        return\n      }\n\n      console.error('Draft generation error:', error)\n      const message =\n        axios.isAxiosError(error)\n          ? (error.response?.data as { error?: string })?.error || error.message || 'Failed to generate outreach drafts'\n          : 'Failed to generate outreach drafts'\n      setSourceError(message)\n      setChatMessages((prev) =>\n        prev.map((chat) =>\n          chat.id === assistantMessageId\n            ? { ...chat, status: \"error\", content: message }\n            : chat,\n        ),\n      )\n      toast.error(message)\n    } finally {\n      if (cancelSource && generateCancelSourceRef.current === cancelSource) {\n        generateCancelSourceRef.current = null\n      }\n      setIsGeneratingFromPrompt(false)\n    }\n  }\n\n  const queueEmails = async (emails: string[], options: { mode?: OutreachMode } = {}) => {\n    if (!emails.length) return\n    const mode = options.mode ?? sendingMode\n    if (mode === 'bulk') {\n      setSendingEmails(true)\n    } else if (mode === 'single' && emails.length === 1) {\n      setSendingLeadEmail(emails[0])\n    }\n    let activeCampaignId = manualCampaignId\n    if (!activeCampaignId) {\n      activeCampaignId = generateManualCampaignId()\n      setManualCampaignId(activeCampaignId)\n    }\n    const campaignLabel = campaignName ? campaignName.trim() : \"Untitled Outreach\"\n\n    let cancelSource: CancelTokenSource | null = null\n    try {\n      const jobs = emails\n        .map((email) => {\n          const lead = leads.find((l) => l.email === email)\n          const draft = drafts[email]\n          if (!lead || !draft) return null\n          return {\n            email,\n            subject: draft.subject,\n            bodyHtml: draft.bodyHtml,\n            bodyText: draft.bodyText,\n            firstName: lead.firstName,\n            lastName: lead.lastName,\n            company: lead.company,\n            summary: lead.summary,\n            sheetRowRef: lead.sourceRowRef ?? `${lead.rowIndex}`,\n            manualCampaignId: activeCampaignId,\n            manualCampaignName: campaignLabel,\n            manualCampaignSource: sourceType as ManualOutreachSource | null,\n          }\n        })\n        .filter(Boolean)\n\n      if (!jobs.length) {\n        setSourceError('No drafts available for the selected leads')\n        return\n      }\n\n      cancelSource = createCancelSource(sendCancelSourceRef)\n\n      await axios.post('/api/email/outreach/send', { jobs }, { cancelToken: cancelSource.token })\n\n      setDrafts((prev) => {\n        const next = { ...prev }\n        emails.forEach((email) => {\n          if (next[email]) {\n            next[email] = { ...next[email], status: 'sent', error: undefined }\n          }\n        })\n        return next\n      })\n      const successMessage = mode === 'bulk' ? 'All outreach emails were sent successfully.' : 'Email sent successfully.'\n      toast.success(successMessage)\n      setSourceError(null)\n      await refetchOutreachJobs().catch(() => undefined)\n    } catch (error) {\n      if (axios.isCancel(error)) {\n        return\n      }\n      console.error('Email queue error:', error)\n      if (axios.isAxiosError(error)) {\n        const message =\n          (error.response?.data as { error?: string })?.error ||\n          error.message ||\n          'Failed to queue outreach emails'\n        setSourceError(message)\n        if (error.response?.status === 409) {\n          toast.error(message)\n        }\n      } else {\n        setSourceError('Failed to queue outreach emails')\n      }\n    } finally {\n      if (cancelSource && sendCancelSourceRef.current === cancelSource) {\n        sendCancelSourceRef.current = null\n      }\n      if (mode === 'bulk') {\n        setSendingEmails(false)\n      }\n      if (mode === 'single') {\n        setSendingLeadEmail(null)\n      }\n    }\n  }\n\n  const sendSingleEmail = (email: string) => {\n    if (sendingMode !== 'single') return\n    const draft = drafts[email]\n    if (!draft || draft.status === 'sent') {\n      toast.error('Generate and review the draft before sending it.')\n      return\n    }\n    queueEmails([email], { mode: 'single' })\n  }\n\n  const handleBulkSendClick = () => {\n    if (sendingMode !== 'bulk') return\n    if (!pendingDraftCount) {\n      toast.error('Generate drafts before sending in bulk.')\n      return\n    }\n    setBulkDialogOpen(true)\n  }\n\n  const confirmBulkSend = () => {\n    setBulkDialogOpen(false)\n    if (!pendingDraftCount) return\n    queueEmails(pendingBulkEmails, { mode: 'bulk' })\n  }\n\n  const startEditingPreview = () => {\n    if (!previewEmail) return\n    const draft = drafts[previewEmail]\n    if (!draft) return\n    setEditedSubject(draft.subject)\n    setEditedBody(draft.bodyText || \"\")\n    setPreviewEditing(true)\n  }\n\n  const cancelEditingPreview = () => {\n    if (!previewEmail) {\n      setPreviewEditing(false)\n      return\n    }\n    const draft = drafts[previewEmail]\n    setEditedSubject(draft?.subject ?? \"\")\n    setEditedBody(draft?.bodyText ?? \"\")\n    setPreviewEditing(false)\n  }\n\n  const saveEditedPreview = () => {\n    if (!previewEmail) return\n    const subject = editedSubject.trim()\n    const body = editedBody.trim()\n    if (!subject || !body) {\n      toast.error('Subject and body cannot be empty.')\n      return\n    }\n\n    const { html, text } = formatEmailBody(body)\n\n    setDrafts((prev) => {\n      const draft = prev[previewEmail]\n      if (!draft) return prev\n      return {\n        ...prev,\n        [previewEmail]: {\n          ...draft,\n          subject,\n          bodyHtml: html,\n          bodyText: text,\n        },\n      }\n    })\n\n    setPreviewEditing(false)\n    toast.success('Draft updated')\n  }\n\n  const outreachUnavailable = !gmailStatus?.isConnected\n  const step1Complete = hasLeads\n  const step2Complete = hasDrafts\n\n  useEffect(() => {\n    if (!resumeReady) return\n    if (!step1Complete && currentStep > 1) {\n      setCurrentStep(1)\n    } else if (!step2Complete && currentStep > 2) {\n      setCurrentStep(2)\n    }\n  }, [currentStep, resumeReady, step1Complete, step2Complete])\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between\">\n        <h1 className=\"text-3xl font-mono font-bold text-foreground\">Leads</h1>\n        <p className=\"text-muted-foreground\">Import, enrich, and engage your outbound database</p>\n      </div>\n\n      <Card className=\"space-y-0\">\n        <CardContent className=\"flex flex-col gap-4 pt-6 sm:flex-row sm:items-center sm:justify-between\">\n          <div className=\"relative w-full sm:max-w-xl\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search leads, campaigns, and outreached emails...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n          <div className=\"flex flex-wrap items-center gap-2\">\n            <Button\n              size=\"sm\"\n              onClick={() => {\n                setWizardOpen(true)\n                setStep(1)\n              }}\n            >\n              <UploadCloud className=\"mr-2 h-4 w-4\" />\n              Outreach leads\n            </Button>\n          </div>\n      </CardContent>\n    </Card>\n\n      <Dialog open={wizardOpen} onOpenChange={setWizardOpen}>\n        <DialogContent className=\"max-w-5xl\">\n          <DialogHeader>\n            <DialogTitle>{campaignName ? campaignName : \"Launch outreach campaign\"}</DialogTitle>\n            <DialogDescription>\n              Step {currentStep} of 3\n              {sourceType ? ` · ${sourceType === \"google-sheet\" ? \"Google Sheet\" : \"File upload\"}` : \"\"}\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-6\">\n            {currentStep === 1 ? (\n              <div className=\"space-y-6\">\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-muted-foreground\" htmlFor=\"outreach-campaign-name\">\n                    Campaign name\n                  </label>\n                  <Input\n                    id=\"outreach-campaign-name\"\n                    value={campaignName}\n                    onChange={(event) => setCampaignName(event.target.value)}\n                    placeholder=\"Ex: HR Directors – Feb 2025\"\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <p className=\"text-sm font-medium text-muted-foreground\">Lead source</p>\n                  <div className=\"space-y-2\">\n                    {SOURCE_OPTIONS.map((option) => {\n                      const isActive = sourceType === option.value\n                      return (\n                        <button\n                          key={option.value}\n                          type=\"button\"\n                          onClick={() => handleSourceTypeChange(option.value)}\n                          className={cn(\n                            \"w-full rounded-lg border p-4 text-left transition\",\n                            isActive\n                              ? \"border-primary bg-primary/5\"\n                              : \"border-border hover:border-primary/40 hover:bg-muted/50\",\n                          )}\n                        >\n                          <div className=\"flex items-center justify-between gap-2\">\n                            <span className=\"font-medium text-foreground\">{option.label}</span>\n                            {isActive ? <Badge variant=\"positive\">Selected</Badge> : null}\n                          </div>\n                          <p className=\"mt-1 text-sm text-muted-foreground\">{option.description}</p>\n                        </button>\n                      )\n                    })}\n                  </div>\n                </div>\n\n                {sourceType === \"google-sheet\" ? (\n                  <div className=\"space-y-4\">\n                    <div className=\"grid gap-4 md:grid-cols-3\">\n                      <div className=\"space-y-2\">\n                        <label className=\"text-sm font-medium text-muted-foreground\">Google Sheet</label>\n                        <Select\n                          value={selectedSheetId}\n                          onValueChange={(value) => {\n                            setSelectedSheetId(value)\n                            setSheetRange(\"\")\n                          }}\n                          onOpenChange={handleSheetSelectOpen}\n                          disabled={spreadsheets.length === 0 && sheetsLoading}\n                        >\n                          <SelectTrigger className=\"w-full justify-between\">\n                            <SelectValue\n                              placeholder={\n                                spreadsheets.length\n                                  ? \"Select sheet\"\n                                  : sheetsLoading\n                                    ? \"Loading sheets…\"\n                                    : \"No sheets saved\"\n                              }\n                            />\n                            {sheetsLoading ? <FastSpinner size=\"sm\" /> : null}\n                          </SelectTrigger>\n                          <SelectContent>\n                            {spreadsheets.map((sheet) => (\n                              <SelectItem key={sheet.id} value={sheet.id}>\n                                {sheet.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <label className=\"text-sm font-medium text-muted-foreground\">Range</label>\n                        <Input\n                          value={sheetRange}\n                          onChange={(event) => setSheetRange(event.target.value)}\n                          placeholder=\"Sheet1!A:P\"\n                        />\n                        <p className=\"text-xs text-muted-foreground\">Use `Tab!A:Z` to limit rows.</p>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <label className=\"text-sm font-medium text-muted-foreground\">Actions</label>\n                        <div className=\"flex flex-wrap items-center gap-2\">\n                          <Button type=\"button\" onClick={handleLoadSheet} disabled={sheetsLoading || !selectedSheetId}>\n                            {sheetsLoading ? <FastSpinner size=\"sm\" className=\"mr-2\" /> : null}\n                            Load data\n                          </Button>\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={() => fetchSpreadsheets().catch(() => undefined)}\n                            disabled={sheetsLoading}\n                          >\n                            Refresh library\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                    {sheetsError ? <ErrorAlert error={sheetsError} onClose={() => setSheetsError(null)} /> : null}\n                    {hasLeads ? (\n                      <div className=\"rounded-md border border-dashed border-border bg-muted/30 px-4 py-3 text-xs text-muted-foreground\">\n                        Loaded {leads.length} leads from the selected sheet.\n                      </div>\n                    ) : null}\n                  </div>\n                ) : null}\n\n                {sourceType === \"file-upload\" ? (\n                  <div className=\"space-y-4\">\n                    <label\n                      htmlFor=\"manual-outreach-upload\"\n                      className={cn(\n                        \"flex cursor-pointer flex-col items-center justify-center gap-3 rounded-lg border border-dashed border-border bg-background p-8 text-center transition hover:border-primary/40 hover:bg-muted/40\",\n                        importingLeads ? \"border-primary bg-primary/5\" : \"\",\n                      )}\n                    >\n                      {importingLeads ? <FastSpinner size=\"lg\" /> : <UploadCloud className=\"h-8 w-8 text-muted-foreground\" />}\n                      <div className=\"space-y-1\">\n                        <p className=\"text-sm font-medium text-foreground\">Upload a CSV or Excel file</p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          We’ll detect emails, first names, last names, job titles, and companies automatically.\n                        </p>\n                      </div>\n                      <span className=\"text-xs font-medium text-primary\">Click to browse files</span>\n                    </label>\n                    <input\n                      ref={fileInputRef}\n                      id=\"manual-outreach-upload\"\n                      type=\"file\"\n                      accept=\".csv,.xlsx,.xls\"\n                      className=\"hidden\"\n                      onChange={handleFileInputChange}\n                    />\n                    {uploadedFileMeta ? (\n                      <div className=\"rounded-md border border-border bg-muted/30 px-4 py-3 text-xs text-muted-foreground\">\n                        Loaded {uploadedFileMeta.rowCount} leads from {uploadedFileMeta.name} ·{\" \"}\n                        {new Date(uploadedFileMeta.importedAt).toLocaleString()}\n                      </div>\n                    ) : null}\n                  </div>\n                ) : null}\n\n                {sourceError ? <p className=\"text-sm text-destructive\">{sourceError}</p> : null}\n\n                <div className=\"flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setWizardOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    onClick={handleStep1Continue}\n                    disabled={!campaignName.trim() || !sourceType || leads.length === 0}\n                  >\n                    Next\n                  </Button>\n                </div>\n              </div>\n            ) : null}\n\n            {currentStep === 2 ? (\n              <div className=\"space-y-6\">\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant=\"outline\" className=\"font-mono uppercase\">\n                    Step 2\n                  </Badge>\n                  <h3 className=\"text-base font-semibold text-foreground\">Describe the outreach email</h3>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  Share the angle, tone, and CTA you’d like. The AI follows your prompt when drafting emails for every lead.\n                </p>\n                <div className=\"rounded-lg border border-border bg-background p-4\">\n                  {chatMessages.length === 0 ? (\n                    <div className=\"flex h-40 items-center justify-center text-sm text-muted-foreground\">\n                      Your conversation with the AI will appear here once you send a prompt.\n                    </div>\n                  ) : (\n                    <div className=\"flex max-h-72 flex-col gap-4 overflow-y-auto\">\n                      {chatMessages.map((message) => {\n                        const isUser = message.role === \"user\"\n                        const isError = message.status === \"error\"\n                        const bubbleClass = cn(\n                          \"max-w-[75%] rounded-lg px-4 py-3 text-sm shadow-sm\",\n                          isUser ? \"text-black\" : \"bg-muted/60 text-foreground\",\n                          isError ? \"bg-red-100 text-red-900\" : \"\",\n                        )\n\n                        return (\n                          <div key={message.id} className={cn(\"flex\", isUser ? \"justify-end\" : \"justify-start\")}>\n                            <div\n                              className={bubbleClass}\n                              style={isUser && !isError ? { backgroundColor: \"hsl(var(--cwt-plum))\" } : undefined}\n                            >\n                              {message.status === \"loading\" ? (\n                                <div className=\"flex items-center gap-2\">\n                                  <FastSpinner size=\"sm\" />\n                                  <span>{message.content}</span>\n                                </div>\n                              ) : (\n                                <span>{message.content}</span>\n                              )}\n                            </div>\n                          </div>\n                        )\n                      })}\n                    </div>\n                  )}\n                </div>\n                <form\n                  className=\"space-y-3\"\n                  onSubmit={(event) => {\n                    event.preventDefault()\n                    if (!isGeneratingFromPrompt) {\n                      void handlePromptSubmit()\n                    }\n                  }}\n                >\n                  <Textarea\n                    value={promptInput}\n                    onChange={(event) => setPromptInput(event.target.value)}\n                    placeholder=\"Example: Reference their Series B, mention how we halve onboarding time, and close with a discovery call offer.\"\n                    rows={4}\n                  />\n                  <div className=\"flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between\">\n                    <p className=\"text-xs text-muted-foreground\">\n                      Mention tone, proof points, objections to overcome, and the closing CTA you expect.\n                    </p>\n                    <Button type=\"submit\" disabled={isGeneratingFromPrompt}>\n                      {isGeneratingFromPrompt ? (\n                        <>\n                          <FastSpinner size=\"sm\" className=\"mr-2\" />\n                          Generating drafts…\n                        </>\n                      ) : (\n                        \"Generate drafts\"\n                      )}\n                    </Button>\n                  </div>\n                </form>\n                {sourceError ? <p className=\"text-sm text-destructive\">{sourceError}</p> : null}\n                <div className=\"flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setStep(1)}>\n                    Previous\n                  </Button>\n                  <Button type=\"button\" onClick={handleStep2Continue} disabled={!hasDrafts}>\n                    Next\n                  </Button>\n                </div>\n              </div>\n            ) : null}\n\n            {currentStep === 3 ? (\n              <div className=\"space-y-6\">\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant=\"outline\" className=\"font-mono uppercase\">\n                    Step 3\n                  </Badge>\n                  <h3 className=\"text-base font-semibold text-foreground\">Review & send</h3>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  Preview every message before delivery. Switch between single send or a bulk blast when you’re ready.\n                </p>\n                {sourceError ? (\n                  <div className=\"rounded-md border border-destructive/40 bg-destructive/10 px-4 py-3 text-sm text-destructive\">\n                    {sourceError}\n                  </div>\n                ) : null}\n                <div className=\"overflow-x-auto rounded-lg border border-border\">\n                  {hasDrafts ? (\n                    <table className=\"w-full text-sm\">\n                      <thead>\n                        <tr className=\"bg-muted/40 text-left\">\n                          <th className=\"px-4 py-2 font-mono font-semibold\">Lead</th>\n                          <th className=\"px-4 py-2 font-mono font-semibold\">Company</th>\n                          <th className=\"px-4 py-2 font-mono font-semibold\">Email</th>\n                          <th className=\"px-4 py-2 font-mono font-semibold\">Status</th>\n                          <th className=\"px-4 py-2 font-mono font-semibold\">Actions</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {filteredLeads.length === 0 ? (\n                          <tr>\n                            <td colSpan={5} className=\"px-4 py-6 text-center text-muted-foreground\">\n                              {leads.length === 0 ? \"Load leads to display results.\" : \"No leads match your search.\"}\n                            </td>\n                          </tr>\n                        ) : (\n                          filteredLeads.map((lead) => {\n                            const draft = drafts[lead.email]\n                            const isSendingThisLead = sendingLeadEmail === lead.email\n                            const isAnotherLeadSending = sendingLeadEmail !== null && !isSendingThisLead\n                            return (\n                              <tr key={lead.rowIndex} className=\"border-t border-border\">\n                                <td className=\"px-4 py-2\">\n                                  <div className=\"font-medium\">\n                                    {lead.firstName || lead.lastName\n                                      ? `${lead.firstName ?? \"\"} ${lead.lastName ?? \"\"}`.trim()\n                                      : lead.email}\n                                  </div>\n                                  {lead.summary && (\n                                    <div className=\"text-xs text-muted-foreground line-clamp-1\">{lead.summary}</div>\n                                  )}\n                                </td>\n                                <td className=\"px-4 py-2 text-muted-foreground\">{lead.company || \"—\"}</td>\n                                <td className=\"px-4 py-2 font-mono text-xs\">{lead.email}</td>\n                                <td className=\"px-4 py-2\">\n                                  <Badge variant={draft ? statusVariant(draft.status) : \"outline\"}>\n                                    {draft ? draft.status.toUpperCase() : \"WAITING\"}\n                                  </Badge>\n                                </td>\n                                <td className=\"px-4 py-2\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <Button\n                                      size=\"sm\"\n                                      variant=\"outline\"\n                                      disabled={!draft}\n                                      onClick={() => setPreviewEmail(lead.email)}\n                                    >\n                                      <Eye className=\"mr-2 h-4 w-4\" />\n                                      View\n                                    </Button>\n                                    {sendingMode === \"single\" && (\n                                      <Button\n                                        size=\"sm\"\n                                        onClick={() => sendSingleEmail(lead.email)}\n                                        disabled={\n                                          !draft ||\n                                          draft.status === \"queued\" ||\n                                          draft.status === \"sent\" ||\n                                          outreachUnavailable ||\n                                          isSendingThisLead ||\n                                          isAnotherLeadSending\n                                        }\n                                      >\n                                        {isSendingThisLead ? (\n                                          <FastSpinner size=\"sm\" className=\"mr-2\" />\n                                        ) : (\n                                          <Send className=\"mr-2 h-4 w-4\" />\n                                        )}\n                                        Send\n                                      </Button>\n                                    )}\n                                  </div>\n                                </td>\n                              </tr>\n                            )\n                          })\n                        )}\n                      </tbody>\n                    </table>\n                  ) : (\n                    <div className=\"flex h-40 items-center justify-center gap-2 text-sm text-muted-foreground\">\n                      <FastSpinner />\n                      {isGeneratingFromPrompt ? \"Generating drafts…\" : \"Generate drafts to preview outreach emails.\"}\n                    </div>\n                  )}\n                </div>\n\n                {hasDrafts ? (\n                  <div className=\"space-y-3\">\n                    <div>\n                      <p className=\"text-sm font-medium text-foreground\">How would you like to send these emails?</p>\n                      <p className=\"text-xs text-muted-foreground\">Switch between single send or bulk delivery.</p>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        type=\"button\"\n                        variant={sendingMode === \"single\" ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => setSendingMode(\"single\")}\n                      >\n                        Single send\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant={sendingMode === \"bulk\" ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => setSendingMode(\"bulk\")}\n                      >\n                        Bulk send\n                      </Button>\n                    </div>\n\n                    {sendingMode === \"bulk\" ? (\n                      <>\n                        <Button\n                          type=\"button\"\n                          onClick={handleBulkSendClick}\n                          disabled={sendingEmails || outreachUnavailable || !pendingDraftCount}\n                          className=\"flex w-full justify-center sm:w-auto\"\n                        >\n                          {sendingEmails ? <FastSpinner size=\"sm\" className=\"mr-2\" /> : <Send className=\"mr-2 h-4 w-4\" />}\n                          Send {pendingDraftCount} emails\n                        </Button>\n\n                        <AlertDialog open={bulkDialogOpen} onOpenChange={setBulkDialogOpen}>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Send {pendingDraftCount} emails in bulk?</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Make sure you’ve reviewed each draft — AI can make mistakes. All emails will be queued immediately.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel disabled={sendingEmails}>Cancel</AlertDialogCancel>\n                              <AlertDialogAction onClick={confirmBulkSend} disabled={sendingEmails}>\n                                {sendingEmails ? <FastSpinner size=\"sm\" className=\"mr-2\" /> : null}\n                                Send all\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </>\n                    ) : (\n                      <p className=\"text-xs text-muted-foreground\">\n                        Use the send button inside the table once you’ve reviewed the draft.\n                      </p>\n                    )}\n                  </div>\n                ) : null}\n\n                <div className=\"flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setStep(2)}>\n                    Previous\n                  </Button>\n                  <Button type=\"button\" variant=\"ghost\" onClick={() => setWizardOpen(false)}>\n                    Close\n                  </Button>\n                </div>\n              </div>\n            ) : null}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n\n      <Card>\n        <CardHeader className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n          <div>\n            <CardTitle className=\"text-lg font-mono\">Outreach history</CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              Review sent campaigns and legacy emails queued from this dashboard.\n            </p>\n          </div>\n          <div className=\"flex flex-wrap items-center gap-2\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => refetchOutreachJobs().catch(() => undefined)}\n              disabled={jobsLoading}\n            >\n              {jobsLoading ? <FastSpinner size=\"sm\" className=\"mr-2\" /> : <RefreshCw className=\"mr-2 h-4 w-4\" />}\n              {jobsLoading ? \"Refreshing…\" : \"Refresh\"}\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => handleExportOutreachedCsv(undefined, { fileLabel: \"outreached-emails\" })}\n              disabled={!outreachedJobs.length || jobsLoading}\n            >\n              <Download className=\"mr-2 h-4 w-4\" />\n              Export all\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <section className=\"space-y-3\">\n            <div className=\"flex items-center justify-between gap-2\">\n              <div>\n                <h3 className=\"text-sm font-semibold text-foreground\">Completed outreach campaigns</h3>\n                <p className=\"text-xs text-muted-foreground\">\n                  Click any campaign to review the leads that were emailed. Campaign summaries include only outreach launched from this page.\n                </p>\n              </div>\n              <Badge variant=\"outline\" className=\"font-mono uppercase\">\n                {manualCampaigns.length} total\n              </Badge>\n            </div>\n            {jobsLoading ? (\n              <div className=\"flex h-40 items-center justify-center gap-2 text-sm text-muted-foreground\">\n                <FastSpinner />\n                Loading outreach history…\n              </div>\n            ) : filteredCampaigns.length === 0 ? (\n              <div className=\"rounded-lg border border-dashed border-border bg-muted/30 p-6 text-sm text-muted-foreground\">\n                {manualCampaigns.length === 0\n                  ? \"No outreach campaigns have been sent yet. Complete Step 3 above to start building your history.\"\n                  : \"No campaigns match your search.\"}\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {filteredCampaigns.map((campaign) => (\n                  <div\n                    key={campaign.id}\n                    className=\"flex flex-col gap-3 rounded-lg border border-border bg-background p-4 sm:flex-row sm:items-center sm:justify-between\"\n                  >\n                    <div className=\"space-y-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-sm font-semibold text-foreground\">{campaign.name}</span>\n                        <Badge variant=\"outline\" className=\"font-mono text-xs uppercase\">\n                          {campaign.sentCount}/{campaign.totalCount} sent\n                        </Badge>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {campaign.source === \"google-sheet\" ? \"Google Sheet\" : \"File upload\"} • {campaign.lastSentAt ? new Date(campaign.lastSentAt).toLocaleString() : \"Not sent yet\"}\n                      </p>\n                    </div>\n                    <div className=\"flex flex-wrap items-center gap-2\">\n                      <Button size=\"sm\" variant=\"outline\" onClick={() => setSelectedCampaign(campaign)}>\n                        <Eye className=\"mr-2 h-4 w-4\" />\n                        View leads\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() =>\n                          handleExportOutreachedCsv(campaign.jobs, {\n                            fileLabel: campaign.name.toLowerCase().replace(/[^a-z0-9]+/g, \"-\"),\n                          })\n                        }\n                      >\n                        <Download className=\"mr-2 h-4 w-4\" />\n                        Export CSV\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </section>\n\n          <section className=\"space-y-3\">\n            <div className=\"flex items-center justify-between gap-2\">\n              <div>\n                <h3 className=\"text-sm font-semibold text-foreground\">Legacy emails</h3>\n                <p className=\"text-xs text-muted-foreground\">\n                  Emails without a campaign tag appear here. You can still review and export them.\n                </p>\n              </div>\n              <Badge variant=\"outline\" className=\"font-mono uppercase\">\n                {filteredLegacyJobs.length}\n              </Badge>\n            </div>\n            <div className=\"overflow-x-auto rounded-lg border border-border\">\n              <table className=\"w-full text-sm\">\n                <thead>\n                  <tr className=\"bg-muted/40 text-left\">\n                    <th className=\"px-4 py-2 font-mono font-semibold\">Recipient</th>\n                    <th className=\"px-4 py-2 font-mono font-semibold\">Subject</th>\n                    <th className=\"px-4 py-2 font-mono font-semibold\">Status</th>\n                    <th className=\"px-4 py-2 font-mono font-semibold\">Sent</th>\n                    <th className=\"px-4 py-2 font-mono font-semibold\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {jobsLoading ? (\n                    <tr>\n                      <td colSpan={5} className=\"px-4 py-6 text-center text-muted-foreground\">\n                        Loading outreached emails…\n                      </td>\n                    </tr>\n                  ) : filteredLegacyJobs.length === 0 ? (\n                    <tr>\n                      <td colSpan={5} className=\"px-4 py-6 text-center text-muted-foreground\">\n                        {legacyJobs.length === 0 ? \"No emails have been sent yet.\" : \"No legacy emails match your search.\"}\n                      </td>\n                    </tr>\n                  ) : (\n                    filteredLegacyJobs.map((job: OutreachedJob) => (\n                      <tr key={job.id} className=\"border-t border-border\">\n                        <td className=\"px-4 py-2\">\n                          <div className=\"font-medium\">\n                            {job.leadFirstName || job.leadLastName\n                              ? `${job.leadFirstName ?? \"\"} ${job.leadLastName ?? \"\"}`.trim()\n                              : job.leadEmail}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">{job.leadEmail}</div>\n                        </td>\n                        <td className=\"px-4 py-2 text-muted-foreground line-clamp-1\">{job.subject}</td>\n                        <td className=\"px-4 py-2\">\n                          <Badge variant={jobStatusVariant(job.status)}>\n                            {job.status === \"SENT\" ? \"COMPLETED\" : job.status}\n                          </Badge>\n                        </td>\n                        <td className=\"px-4 py-2 text-xs whitespace-nowrap text-muted-foreground\">\n                          {job.sentAt ? new Date(job.sentAt).toLocaleString() : \"—\"}\n                        </td>\n                        <td className=\"px-4 py-2\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => setPreviewJob(job)}>\n                            <Eye className=\"mr-2 h-4 w-4\" /> View\n                          </Button>\n                        </td>\n                      </tr>\n                    ))\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </section>\n        </CardContent>\n      </Card>\n\n      <Dialog open={Boolean(previewJob)} onOpenChange={(open) => !open && setPreviewJob(null)}>\n        <DialogContent className=\"w-full max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Sent email</DialogTitle>\n          </DialogHeader>\n          {previewJob && (\n            <div className=\"space-y-4\">\n              <div className=\"text-sm text-muted-foreground\">\n                Sent to <span className=\"font-medium text-foreground\">{previewJob.leadEmail}</span>\n              </div>\n              <div className=\"space-y-2\">\n                <div className=\"font-mono text-sm font-semibold\">Subject</div>\n                <div className=\"rounded-md border border-border bg-muted/40 p-3 text-sm\">{previewJob.subject}</div>\n              </div>\n              <div className=\"space-y-2\">\n                <div className=\"font-mono text-sm font-semibold\">Body</div>\n                <div className=\"rounded-md border border-border bg-muted/40 p-3 text-sm whitespace-pre-wrap\">\n                  {previewJob.bodyText ? previewJob.bodyText : htmlToPlainText(previewJob.bodyHtml)}\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={Boolean(selectedCampaign)} onOpenChange={(open) => !open && setSelectedCampaign(null)}>\n        <DialogContent className=\"w-full max-w-4xl overflow-hidden p-0\">\n          <DialogHeader className=\"space-y-2 px-6 pt-6\">\n            <DialogTitle>{selectedCampaign?.name ?? \"Outreach campaign\"}</DialogTitle>\n            <DialogDescription>\n              {selectedCampaign\n                ? `${selectedCampaign.sentCount}/${selectedCampaign.totalCount} emails sent · ${selectedCampaign.source === \"google-sheet\" ? \"Google Sheet\" : \"File upload\"}`\n                : null}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedCampaign && (\n            <div className=\"space-y-4 px-6 pb-6\">\n              <div className=\"flex flex-wrap items-center justify-between gap-2\">\n                <p className=\"text-xs text-muted-foreground\">\n                  Last activity {selectedCampaign.lastSentAt ? new Date(selectedCampaign.lastSentAt).toLocaleString() : \"Not sent yet\"}\n                </p>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() =>\n                    handleExportOutreachedCsv(selectedCampaign.jobs, {\n                      fileLabel: selectedCampaign.name.toLowerCase().replace(/[^a-z0-9]+/g, \"-\"),\n                    })\n                  }\n                >\n                  <Download className=\"mr-2 h-4 w-4\" />\n                  Export CSV\n                </Button>\n              </div>\n              <div className=\"overflow-x-auto rounded-lg border border-border\">\n                <table className=\"min-w-[720px] w-full text-sm\">\n                  <thead>\n                    <tr className=\"bg-muted/40 text-left\">\n                      <th className=\"px-4 py-2 font-mono font-semibold\">Recipient</th>\n                      <th className=\"px-4 py-2 font-mono font-semibold\">Subject</th>\n                      <th className=\"px-4 py-2 font-mono font-semibold\">Status</th>\n                      <th className=\"px-4 py-2 font-mono font-semibold\">Sent</th>\n                      <th className=\"px-4 py-2 font-mono font-semibold\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {selectedCampaign.jobs.map((job: OutreachedJob) => (\n                      <tr key={job.id} className=\"border-t border-border\">\n                        <td className=\"px-4 py-2\">\n                          <div className=\"font-medium\">\n                            {job.leadFirstName || job.leadLastName\n                              ? `${job.leadFirstName ?? \"\"} ${job.leadLastName ?? \"\"}`.trim()\n                              : job.leadEmail}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">{job.leadEmail}</div>\n                        </td>\n                        <td className=\"px-4 py-2 text-muted-foreground line-clamp-1\">{job.subject}</td>\n                        <td className=\"px-4 py-2\">\n                          <Badge variant={jobStatusVariant(job.status)}>\n                            {job.status === \"SENT\" ? \"COMPLETED\" : job.status}\n                          </Badge>\n                        </td>\n                        <td className=\"px-4 py-2 text-xs whitespace-nowrap text-muted-foreground\">\n                          {job.sentAt ? new Date(job.sentAt).toLocaleString() : \"—\"}\n                        </td>\n                        <td className=\"px-4 py-2\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => setPreviewJob(job)}>\n                            <Eye className=\"mr-2 h-4 w-4\" /> View\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/dashboard/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/dashboard/replies/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/dashboard/replies/replies-client.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/dashboard/settings/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/dashboard/settings/settings-client.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExternalLink' is defined but never used.","line":5,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":42}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useEffect, useMemo, useState } from \"react\"\nimport dynamic from \"next/dynamic\"\nimport { CheckCircle, Clock, ExternalLink, XCircle } from \"lucide-react\"\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { useGmail } from \"@/hooks/useGmail\"\n\nconst GoogleSheetButton = dynamic(() => import(\"@/components/GoogleSheetButton\"), {\n  ssr: false,\n  loading: () => (\n    <Button variant=\"outline\" disabled>\n      Loading Google Sheets…\n    </Button>\n  ),\n})\n\nconst GmailConnectPanel = dynamic(\n  () => import(\"@/components/gmail/GmailConnectPanel\").then((mod) => ({ default: mod.GmailConnectPanel })),\n  {\n    ssr: false,\n    loading: () => (\n      <Button variant=\"outline\" disabled>\n        Loading Gmail…\n      </Button>\n    ),\n  },\n)\n\ntype Integration = {\n  id: string\n  name: string\n  description: string\n  status: \"connected\" | \"pending\" | \"coming-soon\"\n  icon: string\n  configurable: boolean\n}\n\nconst INTEGRATIONS: Integration[] = [\n  {\n    id: \"google-sheets\",\n    name: \"Google Sheets\",\n    description: \"Sync leads and data with Google Sheets\",\n    status: \"connected\",\n    icon: \"📊\",\n    configurable: true,\n  },\n  {\n    id: \"gmail\",\n    name: \"Gmail\",\n    description: \"Send personalised outreach directly from your inbox\",\n    status: \"pending\",\n    icon: \"✉️\",\n    configurable: true,\n  },\n]\n\nconst suppressionList = [\n  {\n    value: \"competitor@rival.com\",\n    reason: \"Competitor\",\n    addedAt: \"Aug 24, 2024\",\n    source: \"Manual\",\n  },\n  {\n    value: \"spam.email@invalid.com\",\n    reason: \"Invalid Email\",\n    addedAt: \"Aug 23, 2024\",\n    source: \"Bounce\",\n  },\n  {\n    value: \"@blacklisted-domain.com\",\n    reason: \"Domain Block\",\n    addedAt: \"Aug 22, 2024\",\n    source: \"Manual\",\n  },\n]\n\nexport function SettingsClient() {\n  const [activeIntegration, setActiveIntegration] = useState<string | null>(null)\n  const [hasMounted, setHasMounted] = useState(false)\n  const { status: gmailStatus, statusLoading: gmailStatusLoading } = useGmail()\n\n  useEffect(() => {\n    setHasMounted(true)\n  }, [])\n\n  const integrations = useMemo(() => {\n    return INTEGRATIONS.map((integration) => {\n      if (integration.id === \"gmail\") {\n        const isConnected = gmailStatus?.isConnected\n        const nextStatus: Integration[\"status\"] = isConnected ? \"connected\" : \"pending\"\n        return {\n          ...integration,\n          status: gmailStatusLoading && !isConnected ? \"pending\" : nextStatus,\n        }\n      }\n      return integration\n    })\n  }, [gmailStatus?.isConnected, gmailStatusLoading])\n\n  const handleIntegrationConfig = (integrationId: string) => {\n    setActiveIntegration(integrationId)\n  }\n\n  const handleBackToIntegrations = () => {\n    setActiveIntegration(null)\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-mono font-bold text-foreground\">Settings</h1>\n        <p className=\"text-muted-text mt-1\">Configure integrations and system preferences</p>\n      </div>\n\n      <Tabs defaultValue=\"integrations\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full max-w-2xl grid-cols-3\">\n          <TabsTrigger value=\"integrations\">Integrations</TabsTrigger>\n          <TabsTrigger value=\"compliance\">Compliance</TabsTrigger>\n          <TabsTrigger value=\"alerts\">Alerts</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"integrations\" className=\"space-y-6\">\n          {activeIntegration ? (\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle className=\"text-lg font-mono\">\n                      {activeIntegration === \"google-sheets\" && \"Google Sheets Integration\"}\n                      {activeIntegration === \"gmail\" && \"Gmail Integration\"}\n                      {activeIntegration !== \"google-sheets\" && activeIntegration !== \"gmail\" && \"Integration Settings\"}\n                    </CardTitle>\n                    <p className=\"text-muted-text mt-1\">\n                      {activeIntegration === \"google-sheets\" && \"Connect and manage your Google Sheets\"}\n                      {activeIntegration === \"gmail\" && \"Connect Gmail to send personalised outreach\"}\n                      {activeIntegration !== \"google-sheets\" && activeIntegration !== \"gmail\" && \"Manage integration settings\"}\n                    </p>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\" onClick={handleBackToIntegrations}>\n                    ← Back to Integrations\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {hasMounted && activeIntegration === \"google-sheets\" && <GoogleSheetButton />}\n                {hasMounted && activeIntegration === \"gmail\" && <GmailConnectPanel />}\n                {hasMounted && activeIntegration !== \"google-sheets\" && activeIntegration !== \"gmail\" && (\n                  <div className=\"text-sm text-muted-foreground\">Configuration for this integration is coming soon.</div>\n                )}\n              </CardContent>\n            </Card>\n          ) : (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg font-mono\">Connected Services</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n                  {integrations.map((integration) => (\n                    <div key={integration.id} className=\"rounded-lg border border-border p-4\">\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div className=\"flex items-center gap-3\">\n                          <span className=\"text-2xl\">{integration.icon}</span>\n                          <div>\n                            <h3 className=\"font-medium\">{integration.name}</h3>\n                            <p className=\"text-sm text-muted-text\">{integration.description}</p>\n                            {integration.id === \"gmail\" && gmailStatus?.emailAddress && (\n                              <p className=\"text-xs text-muted-foreground mt-1\">\n                                Connected as <span className=\"font-mono\">{gmailStatus.emailAddress}</span>\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                        <Badge\n                          variant={\n                            integration.status === \"connected\"\n                              ? \"positive\"\n                              : integration.status === \"pending\"\n                                ? \"secondary\"\n                                : \"neutral\"\n                          }\n                          className={`flex items-center gap-1 ${\n                            integration.status === \"connected\"\n                              ? \"bg-emerald-500 text-white border-transparent hover:bg-emerald-500/90\"\n                              : \" bg-yellow-500\"\n                          }`}\n                        >\n                          {integration.status === \"connected\" ? (\n                            <CheckCircle className=\"h-3.5 w-3.5\" />\n                          ) : (\n                            <Clock className=\"h-3.5 w-3.5\" />\n                          )}\n                          {integration.status === \"connected\"\n                            ? \"Connected\"\n                            : integration.status === \"pending\"\n                              ? \"Pending\"\n                              : \"Soon\"}\n                        </Badge>\n                      </div>\n                     \n                      {integration.configurable && (\n                        <Button className=\"mt-4 w-full\" variant=\"outline\" onClick={() => handleIntegrationConfig(integration.id)}>\n                          Configure\n                        </Button>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"compliance\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg font-mono\">Suppression List</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {suppressionList.map((entry) => (\n                <div key={entry.value} className=\"flex items-center justify-between rounded-lg border border-border p-4\">\n                  <div>\n                    <div className=\"font-medium text-sm text-foreground\">{entry.value}</div>\n                    <div className=\"text-xs text-muted-text\">\n                      {entry.reason} • Added {entry.addedAt} • {entry.source}\n                    </div>\n                  </div>\n                  <Button size=\"sm\" variant=\"ghost\">\n                    Remove\n                  </Button>\n                </div>\n              ))}\n              <Button variant=\"outline\">Upload suppression CSV</Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"alerts\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg font-mono\">Alert Routing</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4 text-sm text-muted-text\">\n              <div className=\"flex items-center gap-3\">\n                <CheckCircle className=\"h-5 w-5 text-emerald-500\" />\n                <span>Send positive replies to founders@company.com</span>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <XCircle className=\"h-5 w-5 text-destructive\" />\n                <span>Pause campaigns automatically after 3 unsubscribes in 24h</span>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <Clock className=\"h-5 w-5 text-amber-500\" />\n                <span>Daily deliverability summary arrives at 7:00am local time</span>\n              </div>\n              <Button variant=\"outline\">Manage alert policy</Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/dashboard/users/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/(protected)/dashboard/users/userTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/app/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/Dashboard.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":79,"column":59,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3632,3648],"text":"Today&apos;s Activity"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3632,3648],"text":"Today&lsquo;s Activity"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3632,3648],"text":"Today&#39;s Activity"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3632,3648],"text":"Today&rsquo;s Activity"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { ArrowUpIcon, ArrowDownIcon, MinusIcon } from \"lucide-react\"\n\nconst kpiData = [\n  { title: \"New Leads\", value: \"142\", change: \"+12%\", trend: \"up\" },\n  { title: \"Queued\", value: \"89\", change: \"-3%\", trend: \"down\" },\n  { title: \"Replies\", value: \"23\", change: \"+8%\", trend: \"up\" },\n  { title: \"Bookings\", value: \"7\", change: \"0%\", trend: \"neutral\" },\n  { title: \"Errors\", value: \"2\", change: \"-50%\", trend: \"down\" },\n]\n\nconst activityFeed = [\n  { time: \"10:23\", event: \"New booking confirmed\", contact: \"Marco Ruiz\", type: \"booking\" },\n  { time: \"09:55\", event: \"Positive reply received\", contact: \"Jane Doe\", type: \"reply\" },\n  { time: \"09:12\", event: \"Campaign launched\", contact: \"Q3 Utility Outreach\", type: \"campaign\" },\n  { time: \"08:45\", event: \"Lead imported\", contact: \"15 new contacts\", type: \"import\" },\n  { time: \"08:30\", event: \"Suppression added\", contact: \"competitor@rival.com\", type: \"suppression\" },\n]\n\nexport default function Dashboard() {\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-mono font-bold text-foreground\">Dashboard</h1>\n        <p className=\"text-muted-text mt-1\">System overview and performance metrics</p>\n      </div>\n\n      {/* KPI Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n        {kpiData.map((kpi) => (\n          <Card key={kpi.title}>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-text\">{kpi.title}</CardTitle>\n              {kpi.trend === \"up\" && <ArrowUpIcon className=\"h-4 w-4 text-status-positive\" />}\n              {kpi.trend === \"down\" && <ArrowDownIcon className=\"h-4 w-4 text-status-bounce\" />}\n              {kpi.trend === \"neutral\" && <MinusIcon className=\"h-4 w-4 text-status-neutral\" />}\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-mono font-bold\">{kpi.value}</div>\n              <div className={`text-xs ${\n                kpi.trend === \"up\" ? \"text-status-positive\" : \n                kpi.trend === \"down\" ? \"text-status-bounce\" : \n                \"text-status-neutral\"\n              }`}>\n                {kpi.change} from yesterday\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Trend Charts */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg font-mono\">Reply Trends</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64 flex items-end justify-between space-x-2 px-4\">\n              {[12, 18, 15, 22, 28, 25, 31].map((value, index) => (\n                <div key={index} className=\"flex-1 bg-muted-bg rounded-sm relative group\">\n                  <div \n                    className=\"bg-cwt-plum rounded-sm transition-all duration-200 group-hover:bg-cwt-plum-light\"\n                    style={{ height: `${(value / 31) * 100}%` }}\n                  />\n                  <div className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs text-muted-text\">\n                    {index + 1}\n                  </div>\n                </div>\n              ))}\n            </div>\n            <div className=\"text-center text-xs text-muted-text mt-8\">Last 7 days</div>\n          </CardContent>\n        </Card>\n\n        {/* Today's Activity */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg font-mono\">Today's Activity</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {activityFeed.map((activity, index) => (\n                <div key={index} className=\"flex items-start space-x-3\">\n                  <div className=\"text-sm text-muted-text font-mono min-w-[3rem]\">\n                    {activity.time}\n                  </div>\n                  <div className={`w-2 h-2 rounded-full mt-2 ${\n                    activity.type === \"booking\" ? \"bg-status-positive\" :\n                    activity.type === \"reply\" ? \"bg-electric-blue\" :\n                    activity.type === \"campaign\" ? \"bg-cwt-plum\" :\n                    activity.type === \"import\" ? \"bg-status-neutral\" :\n                    \"bg-status-bounce\"\n                  }`} />\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"text-sm font-medium text-foreground\">\n                      {activity.event}\n                    </div>\n                    <div className=\"text-sm text-muted-text truncate\">\n                      {activity.contact}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/GoogleSheetButton.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkConnectionStatus'. Either include it or remove the dependency array.","line":34,"column":6,"nodeType":"ArrayExpression","endLine":34,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [checkConnectionStatus]","fix":{"range":[988,990],"text":"[checkConnectionStatus]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useRef } from 'react';\nimport { ErrorAlert } from './google-sheet/ErrorAlert';\nimport { ConnectionStatus } from './google-sheet/ConnectionStatus';\nimport { ConnectionActions } from './google-sheet/ConnectionActions';\nimport { SpreadsheetsList } from './google-sheet/SpreadsheetsList';\nimport { useGoogleSheets } from '@/hooks/useGoogleSheet';\nimport { SheetDataDisplay } from './google-sheet/SheetDataDisplay';\nimport { toast } from 'sonner';\n\n\nexport default function GoogleSheetsButton() {\n  const {\n    status,\n    spreadsheets,\n    selectedSheet,\n    loading,\n    error,\n    setError,\n    checkConnectionStatus,\n    connectGoogleAccount,\n    disconnectGoogleAccount,\n    fetchSpreadsheets,\n    fetchSheetData,\n  } = useGoogleSheets();\n\n  const lastConnectionRef = useRef<boolean | null>(null);\n  const lastErrorRef = useRef<string | null>(null);\n  const wasExpiredRef = useRef<boolean>(false);\n\n  useEffect(() => {\n    checkConnectionStatus();\n  }, []);\n\n  useEffect(() => {\n    const isConnected = Boolean(status?.isConnected && !status?.isExpired);\n\n    if (isConnected && lastConnectionRef.current !== true) {\n      toast.success('Google Sheets connected successfully');\n    }\n\n    if (!isConnected && lastConnectionRef.current === true) {\n      toast.warning('Google Sheets disconnected');\n    }\n\n    if (status?.isExpired && !wasExpiredRef.current) {\n      toast.warning('Google Sheets connection expired. Please reconnect.');\n    }\n\n    wasExpiredRef.current = Boolean(status?.isExpired);\n    lastConnectionRef.current = isConnected;\n  }, [status]);\n\n  useEffect(() => {\n    if (!error) return;\n    if (error === lastErrorRef.current) return;\n    toast.error(error);\n    lastErrorRef.current = error;\n  }, [error]);\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto\">\n      <div className=\"bg-white rounded-lg shadow-md p-6\">\n        <h2 className=\"text-2xl font-bold mb-6\">Google Sheets Integration</h2>\n\n        {error && <ErrorAlert error={error} onClose={() => setError(null)} />}\n\n        <ConnectionStatus status={status} />\n\n        <ConnectionActions\n          status={status}\n          loading={loading}\n          onConnect={connectGoogleAccount}\n          onDisconnect={disconnectGoogleAccount}\n          onFetchSpreadsheets={fetchSpreadsheets}\n          onRefreshStatus={checkConnectionStatus}\n        />\n\n        <SpreadsheetsList\n          spreadsheets={spreadsheets}\n          loading={loading}\n          onLoadData={fetchSheetData}\n        />\n\n        {selectedSheet && (\n          <SheetDataDisplay\n            selectedSheet={selectedSheet}\n            spreadsheets={spreadsheets}\n            loading={loading}\n            onSelectSheet={fetchSheetData}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/StatusBadge.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[618,621],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[618,621],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Badge } from \"@/components/ui/badge\"\n\ninterface StatusBadgeProps {\n  status: 'new' | 'queued' | 'outreaching' | 'positive' | 'neutral' | 'not interested' | 'unsub' | 'bounced'\n  children: React.ReactNode\n}\n\nconst statusVariantMap = {\n  'new': 'new',\n  'queued': 'queued', \n  'outreaching': 'outreach',\n  'positive': 'positive',\n  'neutral': 'neutral',\n  'not interested': 'negative',\n  'unsub': 'unsub',\n  'bounced': 'bounce'\n} as const\n\nexport function StatusBadge({ status, children }: StatusBadgeProps) {\n  const variant = statusVariantMap[status] || 'neutral'\n  \n  return (\n    <Badge variant={variant as any}>\n      {children}\n    </Badge>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/campaigns/CampaignActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/campaigns/CampaignProgressIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/campaigns/CampaignStatusBadge.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[408,411],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[408,411],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/CampaignStatusBadge.tsx\nimport { Badge } from '@/components/ui/badge'\nimport { formatCampaignStatus } from '@/lib/utils'\n\ninterface CampaignStatusBadgeProps {\n  status: string\n  className?: string\n}\n\nexport function CampaignStatusBadge({ status, className }: CampaignStatusBadgeProps) {\n  const { label, variant } = formatCampaignStatus(status)\n  \n  return (\n    <Badge variant={variant as any} className={className}>\n      {label}\n    </Badge>\n  )\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/campaigns/createCampaignForm.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkConnectionStatus'. Either include it or remove the dependency array.","line":74,"column":6,"nodeType":"ArrayExpression","endLine":74,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [checkConnectionStatus, open]","fix":{"range":[2452,2458],"text":"[checkConnectionStatus, open]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchSpreadsheets'. Either include it or remove the dependency array.","line":83,"column":6,"nodeType":"ArrayExpression","endLine":83,"endColumn":35,"suggestions":[{"desc":"Update the dependencies array to be: [status, spreadsheets.length, fetchSpreadsheets]","fix":{"range":[2766,2795],"text":"[status, spreadsheets.length, fetchSpreadsheets]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/gmail/GmailConnectPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/google-sheet/ConnectionActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/google-sheet/ConnectionStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/google-sheet/DataTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/google-sheet/ErrorAlert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/google-sheet/SheetDataDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/google-sheet/SheetTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/google-sheet/SpreadsheetsList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/ui/loader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/ui/sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/hooks/use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/hooks/useAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/hooks/useCampaignStatus.ts","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'startPolling'. Either include it or remove the dependency array.","line":104,"column":6,"nodeType":"ArrayExpression","endLine":104,"endColumn":35,"suggestions":[{"desc":"Update the dependencies array to be: [campaignId, pollingInterval, startPolling]","fix":{"range":[3430,3459],"text":"[campaignId, pollingInterval, startPolling]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/hooks/useCampaigns.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/hooks/useGmail.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/hooks/useGoogleSheet.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/lib/apollo/apollo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/lib/apollo/campaigns.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/lib/auth.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2762,2765],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2762,2765],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2773,2776],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2773,2776],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2838,2841],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2838,2841],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// lib/auth.ts\nimport { NextRequest } from 'next/server'\nimport { cookies } from 'next/headers'\nimport { jwtVerify } from 'jose'\n\nimport { prisma } from './prisma'\n\nconst rawJwtSecret = process.env.JWT_SECRET\n\nif (!rawJwtSecret) {\n  throw new Error('JWT_SECRET environment variable is required but was not provided.')\n}\n\nconst JWT_SECRET = new TextEncoder().encode(rawJwtSecret)\nexport type JWTPayload = { sub: string }\n\nexport interface AuthUser {\n  userId: string\n  email: string\n  role: string\n}\n\nexport interface AuthResult {\n  success: boolean\n  user?: AuthUser\n  error?: string\n}\n\n\nexport async function verifyAuth(request?: NextRequest): Promise<AuthResult> {\n  try {\n    let token: string | undefined\n\n    if (request) {\n      token = request.cookies.get('auth-token')?.value || undefined\n    } else {\n      const cookieStore = await cookies()\n      token = cookieStore.get('auth-token')?.value\n    }\n\n    if (!token) {\n      return {\n        success: false,\n        error: 'No authentication token found'\n      }\n    }\n\n\n    const { payload } = await jwtVerify(token, JWT_SECRET)\n\n    const user: AuthUser = {\n      userId: payload.userId as string,\n      email: payload.email as string,\n      role: payload.role as string\n    }\n\n    return {\n      success: true,\n      user\n    }\n\n  } catch (error) {\n    console.error('Token verification failed:', error)\n    return {\n      success: false,\n      error: 'Invalid or expired token'\n    }\n  }\n}\n\n/**\n * Get current user from cookies (for server components)\n * Returns null if no valid authentication found\n */\nexport async function getCurrentUser(): Promise<AuthUser | null> {\n  try {\n    const cookieStore = await cookies()\n    const token = cookieStore.get('auth-token')?.value\n\n    if (!token) {\n      return null\n    }\n\n    const { payload } = await jwtVerify(token, JWT_SECRET)\n\n    return {\n      userId: payload.userId as string,\n      email: payload.email as string,\n      role: payload.role as string\n    }\n\n  } catch (error) {\n    console.error('Failed to get current user:', error)\n    return null\n  }\n}\n\n/**\n * Check if user is admin\n * Used in server components for role-based access control\n */\nexport async function isAdmin(): Promise<boolean> {\n  const user = await getCurrentUser()\n  return user?.role === 'admin'\n}\n\n\n\nexport async function getUserFromBearer(req: Request) {\n  const auth = req.headers.get(\"authorization\") || \"\"\n  if (!auth.toLowerCase().startsWith(\"bearer \")) return null\n  const token = auth.slice(7)\n  try {\n    const { payload } = await jwtVerify(token, JWT_SECRET)\n    const user = await prisma.user.findUnique({ where: { id: payload.sub as string } })\n    return user\n  } catch {\n    return null\n  }\n}\n\nexport function requireAdmin(\n  handler: (req: Request, ctx: any, user: any) => Promise<Response>\n) {\n  return async (req: Request, ctx: any) => {\n    const user = await getUserFromBearer(req)\n    if (!user || user.role !== \"admin\") {\n      return new Response(JSON.stringify({ error: \"Not authenticated\" }), {\n        status: 401, headers: { \"Content-Type\": \"application/json\" }\n      })\n    }\n    return handler(req, ctx, user)\n  }\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    '/((?!api|_next/static|_next/image|favicon.ico).*)',\n  ],\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/lib/email/email-worker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/lib/email/format.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/lib/gemini.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'working' is never reassigned. Use 'const' instead.","line":464,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":464,"endColumn":14,"fix":{"range":[14305,14339],"text":"const working = stripHtml(raw ?? '')"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// src/lib/gemini.ts\nimport { generateLeadSummary } from './utils'\nimport { GoogleGenAI } from '@google/genai'\nimport type { GenerateContentParameters, GenerateContentResponse } from '@google/genai'\n\ninterface GeminiSummaryInput {\n  firstName?: string | null\n  lastName?: string | null\n  title?: string | null\n  company?: string | null\n  domain?: string | null\n  email?: string | null\n  linkedinUrl?: string | null\n}\n\ninterface OutreachEmailCandidate {\n  subject: string\n  body: string\n}\n\nexport interface OutreachEmailInput {\n  leadFirstName?: string | null\n  leadLastName?: string | null\n  leadCompany?: string | null\n  leadSummary?: string | null\n  leadRole?: string | null\n  senderName?: string | null\n  senderCompany?: string | null\n  senderValueProp?: string | null\n  callToAction?: string | null\n  customInstructions?: string | null\n}\n\nexport interface OutreachEmailDraft {\n  subject: string\n  body: string\n}\n\nfunction buildFallbackOutreachEmail(input: OutreachEmailInput): OutreachEmailDraft {\n  const greeting = input.leadFirstName ? `Hi ${input.leadFirstName},` : 'Hello,'\n  const company = input.leadCompany || 'your team'\n  const summaryLine = input.leadSummary\n    ? `I noticed ${input.leadSummary}`\n    : `I've been following the work happening at ${company}.`\n  const valueProp = input.senderValueProp || 'We help operators scale outbound while staying personal.'\n  const callToAction =\n    input.callToAction || 'Would you be open to a quick 15-minute chat next week to see if this could help?'\n  const sender = input.senderName || 'Our team'\n  const customAngle = input.customInstructions\n    ? `<p>${input.customInstructions}</p>`\n    : undefined\n\n  const subjectTarget = input.leadCompany || input.leadFirstName || 'you'\n\n  return {\n    subject: `Quick idea for ${subjectTarget}`,\n    body: [\n      `<p>${greeting}</p>`,\n      `<p>${summaryLine}</p>`,\n      `<p>${valueProp}</p>`,\n      ...(customAngle ? [customAngle] : []),\n      `<p>${callToAction}</p>`,\n      `<p>Best,<br />${sender}</p>`,\n    ].join('\\n'),\n  }\n}\n\nconst SYSTEM_INSTRUCTION = `You are a sophisticated AI data processing engine. Your main role is to take raw JSON data (which may be messy, incomplete, or contain extra fields) and perform critical structured data extraction and synthesis.\n\nCore Tasks\n1. Parse Input JSON\n   Always read the raw JSON input. Do not ignore fields — search carefully across nested keys, arrays, and objects.\n2. Extract the Following Data Points\n   Full Name → derive from input; if only first/last name provided, combine.\n   First Name\n   Last Name\n   LinkedIn → direct LinkedIn profile URL of the person (if present).\n   Email → extract valid email address.\n   Title → person’s job title.\n   Organization Name → company/organization the person is linked with.\n   Organization Website → company website URL.\n   Organization LinkedIn → company LinkedIn page (if available).\n   City → city of the person.\n   Country → country of the person.\n3. Synthesize a Professional Summary\n   After extraction, generate a 2–3 sentence summary of the person and organization. The summary should be concise, professional, and neutral. If some data points are missing, synthesize the summary only from available information.\n\nOutput Rules\n- Always return output in JSON format only.\n- Do not include extra text, comments, or greetings.\n- If a field is missing, return it as an empty string \"\".\n- Ensure valid JSON syntax (double quotes, no trailing commas).\n\nOutput Schema\n{ \"full_name\": \"string\", \"first_name\": \"string\", \"last_name\": \"string\", \"linkedin_url\": \"string\", \"email\": \"string\", \"title\": \"string\", \"company_name\": \"string\", \"company_website\": \"string\", \"company_linkedin\": \"string\", \"city\": \"string\", \"country\": \"string\", \"summary\": \"string\" }`\n\nlet genAI: GoogleGenAI | null = null\n\nconst DEFAULT_MODEL_ORDER = ['gemini-2.5-flash', 'gemini-2.5-flash'] as const\nconst MAX_RETRY_ATTEMPTS = 3\nconst BASE_RETRY_DELAY_MS = 750\n\nfunction getGeminiClient(): GoogleGenAI | null {\n  if (genAI) {\n    return genAI\n  }\n\n  const apiKey = process.env.GEMINI_API_KEY\n  if (!apiKey) {\n    return null\n  }\n\n  genAI = new GoogleGenAI({ apiKey })\n  return genAI\n}\n\nfunction isRetryableGeminiError(error: unknown): boolean {\n  if (!error || typeof error !== 'object') {\n    return false\n  }\n\n  const maybeError = error as { code?: number; status?: string; error?: { code?: number; status?: string; message?: string }; message?: string }\n  const code = maybeError.code ?? maybeError.error?.code\n  if (typeof code === 'number' && [408, 429, 500, 502, 503, 504].includes(code)) {\n    return true\n  }\n\n  const status = maybeError.status ?? maybeError.error?.status\n  if (typeof status === 'string' && ['UNAVAILABLE', 'RESOURCE_EXHAUSTED'].includes(status.toUpperCase())) {\n    return true\n  }\n\n  const message = maybeError.message ?? maybeError.error?.message\n  if (typeof message === 'string' && /(overloaded|unavailable|timeout|exhausted)/i.test(message)) {\n    return true\n  }\n\n  return false\n}\n\nfunction wait(ms: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n\ntype GeminiRequest = Pick<GenerateContentParameters, 'contents' | 'config'>\n\nasync function generateContentWithFallback(\n  client: GoogleGenAI,\n  baseRequest: GeminiRequest,\n  models: readonly string[] = DEFAULT_MODEL_ORDER,\n) {\n  let lastError: unknown = null\n\n  for (const model of models) {\n    for (let attempt = 0; attempt < MAX_RETRY_ATTEMPTS; attempt += 1) {\n      try {\n        const request: GenerateContentParameters = {\n          model,\n          contents: baseRequest.contents,\n          ...(baseRequest.config ? { config: baseRequest.config } : {}),\n        }\n\n        return await client.models.generateContent(request)\n      } catch (error) {\n        lastError = error\n        if (!isRetryableGeminiError(error)) {\n          throw error\n        }\n\n        const isLastAttempt = attempt === MAX_RETRY_ATTEMPTS - 1\n        if (isLastAttempt) {\n          break\n        }\n\n        const delayMs = BASE_RETRY_DELAY_MS * (attempt + 1)\n        await wait(delayMs)\n      }\n    }\n  }\n\n  throw lastError ?? new Error('Gemini request failed without an explicit error payload')\n}\n\nexport async function generateGeminiLeadSummary(input: GeminiSummaryInput): Promise<string | null> {\n  const client = getGeminiClient()\n  if (!client) {\n    return null\n  }\n\n  const prompt = buildPrompt(input)\n  try {\n    const response = await generateContentWithFallback(client, {\n      contents: [\n        {\n          role: 'user',\n          parts: [{ text: prompt }],\n        },\n      ],\n      config: {\n        systemInstruction: {\n          role: 'system',\n          parts: [{ text: SYSTEM_INSTRUCTION }],\n        },\n      },\n    })\n\n    const text = extractResponseText(response)\n\n    if (!text) {\n      return null\n    }\n\n    try {\n      const parsed = JSON.parse(text)\n      if (parsed && typeof parsed === 'object') {\n        const summary = typeof parsed.summary === 'string' ? parsed.summary.trim() : ''\n        if (summary) {\n          return summary\n        }\n      }\n    } catch {\n      // Fall through to returning raw text\n    }\n\n    return text.trim()\n  } catch (error) {\n    console.error('Gemini summary generation error:', error)\n    return null\n  }\n}\n\nfunction buildPrompt(input: GeminiSummaryInput): string {\n  const payload = {\n    person: {\n      first_name: input.firstName || '',\n      last_name: input.lastName || '',\n      title: input.title || '',\n      company: input.company || '',\n      domain: input.domain || '',\n      email: input.email || '',\n      linkedin_url: input.linkedinUrl || ''\n    }\n  }\n\n  return JSON.stringify(payload, null, 2)\n}\n\nfunction extractResponseText(response: GenerateContentResponse | null | undefined): string | null {\n  if (!response) {\n    return null\n  }\n\n  const maybeTextMember = (response as unknown as { text?: unknown }).text\n\n  if (typeof maybeTextMember === 'function') {\n    try {\n      const value = maybeTextMember.call(response)\n      if (typeof value === 'string' && value.trim()) {\n        return value.trim()\n      }\n    } catch (error) {\n      console.warn('Failed to read Gemini response via text() helper:', error)\n    }\n  } else if (typeof maybeTextMember === 'string' && maybeTextMember.trim()) {\n    return maybeTextMember.trim()\n  }\n\n  const candidatesText = pickTextFromCandidates(\n    (response as unknown as { candidates?: unknown }).candidates as Array<{\n      content?: { parts?: Array<{ text?: string }> }\n      text?: unknown\n    }> | undefined\n  )\n  if (candidatesText) {\n    return candidatesText\n  }\n\n  const nestedResponse = (response as unknown as { response?: { candidates?: unknown } }).response\n  const nestedText = pickTextFromCandidates(\n    nestedResponse?.candidates as Array<{\n      content?: { parts?: Array<{ text?: string }> }\n      text?: unknown\n    }> | undefined\n  )\n  if (nestedText) {\n    return nestedText\n  }\n\n  const outputText = (response as unknown as { output_text?: unknown }).output_text\n  if (typeof outputText === 'string' && outputText.trim()) {\n    return outputText.trim()\n  }\n\n  return null\n}\n\nfunction pickTextFromCandidates(\n  candidates?: Array<{ content?: { parts?: Array<{ text?: string }> }; text?: unknown }>,\n): string | null {\n  if (!Array.isArray(candidates)) {\n    return null\n  }\n\n  for (const candidate of candidates) {\n    if (!candidate) continue\n\n    const candidateText = candidate.text\n    if (typeof candidateText === 'string' && candidateText.trim()) {\n      return candidateText.trim()\n    }\n\n    const parts = candidate.content?.parts\n    if (!Array.isArray(parts)) {\n      continue\n    }\n\n    for (const part of parts) {\n      if (typeof part?.text === 'string' && part.text.trim()) {\n        return part.text.trim()\n      }\n    }\n  }\n\n  return null\n}\n\nexport async function generateSmartLeadSummary(input: GeminiSummaryInput): Promise<string> {\n  const geminiSummary = await generateGeminiLeadSummary(input)\n  if (geminiSummary) {\n    return geminiSummary\n  }\n\n  return generateLeadSummary({\n    id: '',\n    first_name: input.firstName || '',\n    last_name: input.lastName || '',\n    title: input.title || '',\n    company_name: input.company || '',\n    domain: input.domain || '',\n    email: input.email || '',\n    linkedin_url: input.linkedinUrl || '',\n  })\n}\n\nconst OUTREACH_EMAIL_SYSTEM_PROMPT = [\n  'You are an expert SDR who writes tailored cold outreach.',\n  'Respond ONLY with minified JSON that matches this schema: { \"subject\": \"string\", \"body\": \"string\" }.',\n  '',\n  'Formatting requirements for \"body\":',\n  '  - Compose 2–3 short paragraphs wrapped in semantic <p> tags.',\n  '  - Use <br /> only when you need a deliberate line break inside a paragraph.',\n  '  - Keep the entire email under 170 words.',\n  '',\n  'Content requirements:',\n  '  - Greet the lead by name and reference their role/company.',\n  '  - Connect the provided lead summary to the sender value proposition.',\n  '  - Close with one clear CTA (e.g. proposing a quick intro call).',\n  '  - Maintain a confident, respectful tone suitable for senior operators.',\n  '  - Do not fabricate information beyond the supplied payload.',\n  '  - If payload.instructions is provided, treat it as the highest priority guidance for tone, structure, and content choices.',\n].join('\\n')\n\nexport async function generateOutreachEmailDraft(\n  input: OutreachEmailInput,\n): Promise<OutreachEmailDraft | null> {\n  const payload = {\n    lead: {\n      first_name: input.leadFirstName || '',\n      last_name: input.leadLastName || '',\n      company: input.leadCompany || '',\n      role: input.leadRole || '',\n      summary: input.leadSummary || '',\n    },\n    sender: {\n      name: input.senderName || '',\n      company: input.senderCompany || '',\n      value_prop: input.senderValueProp || '',\n      call_to_action: input.callToAction || 'Would love 15 minutes later this week to share more if it resonates.',\n    },\n    instructions: input.customInstructions || '',\n  }\n\n  try {\n    const client = getGeminiClient()\n    if (!client) {\n      console.warn('Gemini client unavailable, falling back to deterministic outreach email')\n      return buildFallbackOutreachEmail(input)\n    }\n\n    const response = await generateContentWithFallback(client, {\n      contents: [\n        {\n          role: 'user',\n          parts: [{ text: JSON.stringify(payload, null, 2) }],\n        },\n      ],\n      config: {\n        systemInstruction: {\n          role: 'system',\n          parts: [{ text: OUTREACH_EMAIL_SYSTEM_PROMPT }],\n        },\n        responseMimeType: 'application/json',\n      },\n    })\n\n    const text = extractResponseText(response)\n    if (!text) {\n      console.warn('Gemini returned empty response, using fallback outreach email')\n      return buildFallbackOutreachEmail(input)\n    }\n\n    const normalisedJson = normaliseJsonBlock(text)\n\n    if (normalisedJson) {\n      try {\n        const parsed = JSON.parse(normalisedJson) as OutreachEmailCandidate\n        if (parsed.subject && parsed.body) {\n          return {\n            subject: parsed.subject.trim(),\n            body: enhanceEmailBody(parsed.body, input),\n          }\n        }\n      } catch (error) {\n        console.warn('Gemini outreach email response unparsable, returning raw text body', error)\n      }\n    }\n\n    return {\n      subject: `Quick intro?`,\n      body: enhanceEmailBody(text, input),\n    }\n  } catch (error) {\n    console.error('Gemini outreach email generation error:', error)\n    return buildFallbackOutreachEmail(input)\n  }\n}\n\nfunction normaliseJsonBlock(raw: string): string | null {\n  if (!raw) return null\n  const trimmed = raw.trim()\n\n  const fenced = trimmed.match(/^```(?:json)?\\s*([\\s\\S]*?)```$/i)\n  if (fenced) {\n    return fenced[1].trim()\n  }\n\n  const firstBrace = trimmed.indexOf('{')\n  const lastBrace = trimmed.lastIndexOf('}')\n  if (firstBrace >= 0 && lastBrace > firstBrace) {\n  return trimmed.slice(firstBrace, lastBrace + 1)\n  }\n\n  return trimmed\n}\n\nfunction enhanceEmailBody(raw: string | null | undefined, context: Pick<OutreachEmailInput, 'callToAction' | 'senderName'>): string {\n  const defaultCTA =\n    (context.callToAction && context.callToAction.trim()) ||\n    'Would love 15 minutes later this week to share more if it resonates.'\n  const senderName = context.senderName?.trim() || 'Our team'\n\n  let working = stripHtml(raw ?? '')\n  if (!working) {\n    return `${defaultCTA}\\n\\nBest,\\n${senderName}`\n  }\n\n  const paragraphs = working.split(/\\n{2,}/).map((paragraph) => paragraph.trim()).filter(Boolean)\n  let structuredParagraphs = paragraphs.length > 1 ? paragraphs : chunkSentences(working)\n\n  if (!structuredParagraphs.length) {\n    structuredParagraphs = [working]\n  }\n\n  const lower = working.toLowerCase()\n  const ctaKeywords = ['call', 'chat', 'meet', 'meeting', 'schedule', 'time', 'connect', 'discussion', 'discuss', 'conversation']\n  const hasCTA =\n    lower.includes(defaultCTA.toLowerCase()) || ctaKeywords.some((keyword) => lower.includes(keyword))\n\n  const signoffRegex = /(best|thanks|regards|cheers|sincerely)[\\s,]/i\n  let existingSignoff: string | null = null\n\n  if (structuredParagraphs.length) {\n    const lastParagraph = structuredParagraphs[structuredParagraphs.length - 1]\n    if (signoffRegex.test(lastParagraph.toLowerCase())) {\n      existingSignoff = lastParagraph\n      structuredParagraphs = structuredParagraphs.slice(0, -1)\n    }\n  }\n\n  if (!hasCTA) {\n    structuredParagraphs = [...structuredParagraphs, defaultCTA]\n  }\n\n  if (existingSignoff) {\n    structuredParagraphs = [...structuredParagraphs, existingSignoff]\n  } else if (!signoffRegex.test(lower)) {\n    structuredParagraphs = [...structuredParagraphs, `Best,\\n${senderName}`]\n  }\n\n  return structuredParagraphs.join('\\n\\n').replace(/\\n{3,}/g, '\\n\\n').trim()\n}\n\nfunction stripHtml(value: string): string {\n  return value\n    .replace(/```(?:json)?/gi, '')\n    .replace(/<\\/p>\\s*/gi, '\\n\\n')\n    .replace(/<br\\s*\\/?>/gi, '\\n')\n    .replace(/<[^>]+>/g, '')\n    .replace(/\\r\\n/g, '\\n')\n    .replace(/\\t/g, ' ')\n    .replace(/[ \\u00A0]{2,}/g, ' ')\n    .trim()\n}\n\nfunction chunkSentences(value: string): string[] {\n  const sentences = value.split(/(?<=[.?!])\\s+(?=[A-Z0-9])/).map((sentence) => sentence.trim()).filter(Boolean)\n  if (!sentences.length) {\n    return []\n  }\n\n  const paragraphs: string[] = []\n  let current = ''\n\n  for (const sentence of sentences) {\n    if (!current) {\n      current = sentence\n      continue\n    }\n\n    const next = `${current} ${sentence}`.trim()\n    if (next.length <= 200) {\n      current = next\n    } else {\n      paragraphs.push(current)\n      current = sentence\n    }\n  }\n\n  if (current) {\n    paragraphs.push(current)\n  }\n\n  return paragraphs\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/lib/google-gmail/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[559,562],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[559,562],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2222,2225],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2222,2225],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2281,2284],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2281,2284],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2490,2493],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2490,2493],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { google } from 'googleapis';\n\nimport { newOAuth2Client } from '@/lib/google-sheet/google-auth';\nimport { prisma } from '@/lib/prisma';\n\nexport const GMAIL_SCOPES = [\n  'https://www.googleapis.com/auth/gmail.send',\n  'https://www.googleapis.com/auth/gmail.modify',\n  'https://www.googleapis.com/auth/userinfo.email',\n]\n\ntype GmailAccountRecord = {\n  id: string\n  userId: string\n  emailAddress: string\n  accessToken: string\n  refreshToken: string\n  expiresAt: Date\n  scope: string\n  tokenType: string\n  historyId?: string | null\n}\n\nconst db = prisma as any;\n\nexport class GmailUnauthorizedClientError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'GmailUnauthorizedClientError';\n  }\n}\n\nexport function createGmailOAuthClient(redirectPath: string = '/api/auth/google/gmail/callback') {\n  return newOAuth2Client(redirectPath);\n}\n\nexport async function createAuthorizedGmailClient(\n  accessToken: string,\n  refreshToken: string,\n  redirectPath?: string,\n) {\n  const oauth2Client = createGmailOAuthClient(redirectPath);\n  oauth2Client.setCredentials({\n    access_token: accessToken,\n    refresh_token: refreshToken,\n  });\n  return oauth2Client;\n}\n\nexport async function refreshGmailToken(\n  gmailAccount: GmailAccountRecord,\n  redirectPath?: string,\n): Promise<GmailAccountRecord> {\n  const oauth2Client = await createAuthorizedGmailClient(\n    gmailAccount.accessToken,\n    gmailAccount.refreshToken,\n    redirectPath\n  );\n\n  try {\n    const { credentials } = await oauth2Client.refreshAccessToken();\n    const nextAccessToken = credentials.access_token || gmailAccount.accessToken;\n    const nextRefreshToken = credentials.refresh_token || gmailAccount.refreshToken;\n    const expiryMs = credentials.expiry_date || Date.now() + 55 * 60 * 1000;\n\n    return await db.gmailAccount.update({\n      where: { id: gmailAccount.id },\n      data: {\n        accessToken: nextAccessToken,\n        refreshToken: nextRefreshToken,\n        expiresAt: new Date(expiryMs),\n        tokenType: credentials.token_type || gmailAccount.tokenType,\n        scope: credentials.scope || gmailAccount.scope,\n      },\n    }) as GmailAccountRecord;\n  } catch (error) {\n    const rawMessage =\n      (error as any)?.response?.data?.error_description ||\n      (error as any)?.response?.data?.error ||\n      (error as Error)?.message ||\n      'Unknown Gmail token error';\n    const isUnauthorizedClient =\n      rawMessage.toLowerCase().includes('unauthorized') ||\n      (error as any)?.code === 401;\n\n    console.error('Gmail token refresh failed:', error);\n\n    if (isUnauthorizedClient) {\n      throw new GmailUnauthorizedClientError(\n        'Google rejected the Gmail OAuth client. Ensure the Gmail API is enabled for this Google Cloud project and reconnect the Gmail account.'\n      );\n    }\n\n    throw new Error('Failed to refresh Gmail token');\n  }\n}\n\nexport async function ensureFreshGmailToken(\n  gmailAccount: GmailAccountRecord,\n  redirectPath?: string,\n) {\n  const expiresAt = gmailAccount.expiresAt?.getTime?.() || gmailAccount.expiresAt.valueOf()\n  if (!expiresAt || expiresAt - Date.now() <= 5 * 60 * 1000) {\n    return refreshGmailToken(gmailAccount, redirectPath)\n  }\n  return gmailAccount\n}\n\nexport async function sendGmailMessage(\n  gmailAccount: GmailAccountRecord,\n  opts: {\n    to: string\n    subject: string\n    htmlBody: string\n    textBody?: string\n    replyTo?: string\n  },\n): Promise<string> {\n  const refreshed = await ensureFreshGmailToken(gmailAccount)\n  const oauth2Client = await createAuthorizedGmailClient(\n    refreshed.accessToken,\n    refreshed.refreshToken,\n  )\n  const gmail = google.gmail({ version: 'v1', auth: oauth2Client })\n\n  const mimeParts: string[] = []\n  mimeParts.push(`From: ${refreshed.emailAddress}`)\n  mimeParts.push(`To: ${opts.to}`)\n  mimeParts.push(`Subject: ${opts.subject}`)\n  if (opts.replyTo) {\n    mimeParts.push(`Reply-To: ${opts.replyTo}`)\n  }\n  mimeParts.push('MIME-Version: 1.0')\n  mimeParts.push('Content-Type: multipart/alternative; boundary=\"boundary\"')\n  mimeParts.push('')\n  mimeParts.push('--boundary')\n  mimeParts.push('Content-Type: text/plain; charset=\"UTF-8\"')\n  mimeParts.push('')\n  mimeParts.push(opts.textBody || stripHtml(opts.htmlBody))\n  mimeParts.push('--boundary')\n  mimeParts.push('Content-Type: text/html; charset=\"UTF-8\"')\n  mimeParts.push('')\n  mimeParts.push(opts.htmlBody)\n  mimeParts.push('--boundary--')\n\n  const rawMessage = mimeParts.join('\\n')\n  const encodedMessage = Buffer.from(rawMessage, 'utf-8')\n    .toString('base64')\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=+$/, '')\n\n  const response = await gmail.users.messages.send({\n    userId: 'me',\n    requestBody: {\n      raw: encodedMessage,\n    },\n  })\n\n  const messageId = response.data.id\n  if (!messageId) {\n    throw new Error('Gmail API did not return a message id')\n  }\n  return messageId\n}\n\nfunction stripHtml(html: string): string {\n  return html.replace(/<[^>]+>/g, '')\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/lib/google-sheet/google-auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/lib/google-sheet/google-sheet-writer.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[284,287],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[284,287],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1756,1759],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1756,1759],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2715,2718],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2715,2718],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3187,3190],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3187,3190],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3541,3544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3541,3544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":150,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4603,4606],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4603,4606],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":185,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5530,5533],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5530,5533],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":204,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5954,5957],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5954,5957],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":228,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6488,6491],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6488,6491],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/lib/google-sheet-writer.ts\nimport { google } from 'googleapis'\nimport { LEAD_SHEET_COLUMNS, SheetLeadRow } from '../utils'\n\nconst MAX_REQUESTS_PER_MINUTE = 60\nconst DEFAULT_BATCH_SIZE = 500\nconst MAX_APPEND_RETRIES = 5\n\nexport async function writeLeadsToSheet(\n  oauth2Client: any,\n  spreadsheetId: string,\n  range: string,\n  rows: SheetLeadRow[],\n  batchSize: number = DEFAULT_BATCH_SIZE\n): Promise<number> {\n  const sheets = google.sheets({ version: 'v4', auth: oauth2Client })\n  let totalWritten = 0\n  const throttleDelayMs = Math.max(1000, Math.floor(60000 / MAX_REQUESTS_PER_MINUTE))\n\n  // Check if sheet has headers, if not add them\n  await ensureHeaders(sheets, spreadsheetId, range)\n\n  // Process leads in batches\n  for (let i = 0; i < rows.length; i += batchSize) {\n    const batch = rows.slice(i, i + batchSize)\n    const values = batch.map(leadToSheetRow)\n\n    await appendWithRetry(sheets, {\n      spreadsheetId,\n      range,\n      values,\n    })\n\n    totalWritten += batch.length\n    console.log(`Written ${batch.length} leads to sheet (total: ${totalWritten})`)\n\n    if (i + batchSize < rows.length) {\n      await delay(throttleDelayMs)\n    }\n  }\n\n  return totalWritten\n}\n\nasync function appendWithRetry(\n  sheets: ReturnType<typeof google.sheets>,\n  params: {\n    spreadsheetId: string\n    range: string\n    values: string[][]\n  }\n) {\n  let attempt = 0\n  let backoffMs = 1000\n\n  while (attempt <= MAX_APPEND_RETRIES) {\n    try {\n      await sheets.spreadsheets.values.append({\n        spreadsheetId: params.spreadsheetId,\n        range: params.range,\n        valueInputOption: 'RAW',\n        insertDataOption: 'INSERT_ROWS',\n        requestBody: {\n          values: params.values,\n        },\n      })\n      return\n    } catch (error: any) {\n      const statusCode = extractStatusCode(error)\n      const isAuthScopeError = typeof error?.message === 'string' && error.message.includes('insufficient authentication scopes')\n      const shouldRetry = statusCode === 429 || (statusCode !== null && statusCode >= 500 && statusCode < 600)\n\n      console.error(`Failed to write batch (attempt ${attempt + 1}):`, error)\n\n      if (isAuthScopeError) {\n        console.error('❌ Authentication scopes issue detected. Please reconnect your Google account.')\n        throw new Error('Insufficient Google Sheets permissions. Please reconnect your Google account with write permissions.')\n      }\n\n      if (!shouldRetry || attempt === MAX_APPEND_RETRIES) {\n        throw new Error(`Failed to append values to Google Sheet after ${attempt + 1} attempts.`)\n      }\n\n      await delay(backoffMs)\n      backoffMs = Math.min(backoffMs * 2, 30000)\n      attempt += 1\n    }\n  }\n}\n\nfunction extractStatusCode(error: any): number | null {\n  if (!error) return null\n\n  const codeFromResponse = error?.response?.status\n  if (typeof codeFromResponse === 'number') {\n    return codeFromResponse\n  }\n\n  const codeFromError = typeof error?.code === 'number' ? error.code : Number(error?.code)\n  if (!Number.isNaN(codeFromError) && Number.isFinite(codeFromError)) {\n    return Number(codeFromError)\n  }\n\n  const reason = error?.errors && Array.isArray(error.errors)\n    ? error.errors.find((err: any) => typeof err?.reason === 'string')?.reason\n    : null\n\n  if (reason === 'rateLimitExceeded' || reason === 'userRateLimitExceeded') {\n    return 429\n  }\n\n  return null\n}\n\nasync function delay(ms: number): Promise<void> {\n  if (ms <= 0) {\n    return\n  }\n  await new Promise(resolve => setTimeout(resolve, ms))\n}\n\nasync function ensureHeaders(sheets: any, spreadsheetId: string, range: string) {\n  try {\n    // Extract sheet name from range (e.g., \"Leads!A:Z\" -> \"Leads\")\n    const sheetName = range.includes('!') ? range.split('!')[0] : 'Sheet1'\n    \n    // Check if there are any values in the first row\n    const response = await sheets.spreadsheets.values.get({\n      spreadsheetId,\n      range: `${sheetName}!A1:P1`, // First row\n    })\n\n    const existingHeaders = response.data.values?.[0]\n    const headersMatch = Array.isArray(existingHeaders)\n      && existingHeaders.length >= LEAD_SHEET_COLUMNS.length\n      && LEAD_SHEET_COLUMNS.every((col, index) => (existingHeaders[index] || '').toString().trim().toLowerCase() === col.toLowerCase())\n\n    if (!headersMatch) {\n      await sheets.spreadsheets.values.update({\n        spreadsheetId,\n        range: `${sheetName}!A1:P1`,\n        valueInputOption: 'RAW',\n        requestBody: {\n          values: [LEAD_SHEET_COLUMNS],\n        },\n      })\n\n      console.log(`Added headers to spreadsheet ${spreadsheetId} in sheet ${sheetName}`)\n    }\n  } catch (error:any) {\n    console.error('Failed to ensure headers:', error)\n    \n    // Check if it's an authentication scope error\n    if (error.message && error.message.includes('insufficient authentication scopes')) {\n      console.error('❌ Authentication scopes issue detected in headers check.')\n      throw new Error('Insufficient Google Sheets permissions. Please reconnect your Google account with write permissions.')\n    }\n    \n    // Continue without headers if this fails for other reasons\n  }\n}\n\nfunction leadToSheetRow(lead: SheetLeadRow): string[] {\n  return [\n    lead.email,\n    lead.firstName,\n    lead.lastName,\n    lead.phone,\n    lead.company,\n    lead.jobTitle,\n    lead.website,\n    lead.linkedinUrl,\n    lead.industry,\n    lead.streetAddress,\n    lead.city,\n    lead.state,\n    lead.country,\n    lead.postalCode,\n    lead.formattedAddress,\n    lead.summary,\n  ]\n}\n\nexport async function appendToSheet(\n  oauth2Client: any,\n  spreadsheetId: string,\n  sheetName: string,\n  values: string[][]\n): Promise<void> {\n  const sheets = google.sheets({ version: 'v4', auth: oauth2Client })\n\n  await sheets.spreadsheets.values.append({\n    spreadsheetId,\n    range: `${sheetName}!A:Z`,\n    valueInputOption: 'RAW',\n    insertDataOption: 'INSERT_ROWS',\n    requestBody: {\n      values,\n    },\n  })\n}\n\nexport async function createNewSheet(\n  oauth2Client: any,\n  spreadsheetId: string,\n  sheetTitle: string\n): Promise<number> {\n  const sheets = google.sheets({ version: 'v4', auth: oauth2Client })\n\n  const response = await sheets.spreadsheets.batchUpdate({\n    spreadsheetId,\n    requestBody: {\n      requests: [\n        {\n          addSheet: {\n            properties: {\n              title: sheetTitle,\n            },\n          },\n        },\n      ],\n    },\n  })\n\n  return response.data.replies?.[0]?.addSheet?.properties?.sheetId || 0\n}\n\nexport async function getSheetInfo(oauth2Client: any, spreadsheetId: string) {\n  const sheets = google.sheets({ version: 'v4', auth: oauth2Client })\n\n  const response = await sheets.spreadsheets.get({\n    spreadsheetId,\n    fields: 'properties,sheets.properties',\n  })\n\n  return response.data\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/lib/google-sheet/google-sheet.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[758,761],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[758,761],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1643,1646],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1643,1646],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2170,2173],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2170,2173],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2226,2229],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2226,2229],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2498,2501],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2498,2501],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":94,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2890,2893],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2890,2893],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":108,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3238,3241],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3238,3241],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { google } from 'googleapis';\nimport { newOAuth2Client } from './google-auth';\nimport { GoogleOAuthToken } from '@prisma/client';\nimport { prisma } from '../prisma'; // Use your existing prisma instance\nimport { GoogleSpreadsheet } from '@/types/google-sheet';\n\nexport class GoogleDriveApiDisabledError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'GoogleDriveApiDisabledError';\n  }\n}\n\n\nexport async function createAuthorizedClient(accessToken: string, refreshToken: string) {\n  const oauth2Client = newOAuth2Client();\n  \n  oauth2Client.setCredentials({\n    access_token: accessToken,\n    refresh_token: refreshToken,\n  });\n\n  return oauth2Client;\n}\n\nexport async function refreshTokenIfNeeded(\n  oauth2Client: any, \n  tokenRecord: GoogleOAuthToken, \n  userId: string\n): Promise<string> {\n  try {\n    const { credentials } = await oauth2Client.refreshAccessToken();\n    const resolvedAccessToken = credentials.access_token || tokenRecord.accessToken;\n    const resolvedRefreshToken = credentials.refresh_token || tokenRecord.refreshToken;\n    const expiryDateMs = credentials.expiry_date || Date.now() + 55 * 60 * 1000; // default to ~55 minutes\n\n    await prisma.googleOAuthToken.update({\n      where: { userId },\n      data: {\n        accessToken: resolvedAccessToken,\n        refreshToken: resolvedRefreshToken,\n        expiresAt: new Date(expiryDateMs),\n      }\n    });\n\n    return resolvedAccessToken;\n  } catch (error) {\n    console.error('Token refresh failed:', error);\n    throw new Error('Failed to refresh Google token');\n  }\n}\n\nexport async function getUserSpreadsheets(oauth2Client: any): Promise<GoogleSpreadsheet[]> {\n  const drive = google.drive({ version: 'v3', auth: oauth2Client });\n\n  try {\n    const response = await drive.files.list({\n      q: \"mimeType='application/vnd.google-apps.spreadsheet'\",\n      fields: 'files(id, name, webViewLink)',\n      pageSize: 100,\n    });\n\n    return (\n      response.data.files?.map((file) => ({\n        id: file.id!,\n        name: file.name!,\n        webViewLink: file.webViewLink!,\n      })) || []\n    );\n  } catch (error) {\n    const apiMessage =\n      (error as any)?.response?.data?.error?.message ||\n      (error as any)?.errors?.[0]?.message ||\n      (error as Error)?.message ||\n      'Unknown Google Drive error';\n\n    const isDisabled =\n      apiMessage.includes('Google Drive API has not been used in project') ||\n      apiMessage.includes('drive.googleapis.com') ||\n      (error as any)?.code === 403;\n\n    if (isDisabled) {\n      throw new GoogleDriveApiDisabledError(\n        'Google Drive API is disabled for the connected Google project. Enable the Drive API in Google Cloud Console and try again.'\n      );\n    }\n\n    console.error('Failed to list Google Sheets via Drive API:', error);\n    throw error;\n  }\n}\n\nexport async function getSpreadsheetData(\n  oauth2Client: any, \n  spreadsheetId: string, \n  range: string = 'Sheet1'\n): Promise<string[][]> {\n  const sheets = google.sheets({ version: 'v4', auth: oauth2Client });\n  \n  const response = await sheets.spreadsheets.values.get({\n    spreadsheetId,\n    range,\n  });\n\n  return response.data.values || [];\n}\n\nexport async function getSpreadsheetInfo(oauth2Client: any, spreadsheetId: string) {\n  const sheets = google.sheets({ version: 'v4', auth: oauth2Client });\n  \n  const response = await sheets.spreadsheets.get({\n    spreadsheetId,\n    fields: 'properties,sheets.properties'\n  });\n\n  return response.data;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/lib/http-client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/lib/leads/outreach.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/lib/prisma.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/lib/queue.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Worker' is defined but never used.","line":2,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1109,1112],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1109,1112],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1391,1394],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1391,1394],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1752,1755],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1752,1755],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/lib/queue.ts\nimport { Queue, Worker, Job } from 'bullmq'\nimport Redis from 'ioredis'\n\n// Redis connection\nconst redis = new Redis(process.env.REDIS_URL || 'redis://localhost:6379', {\n  maxRetriesPerRequest: null, // BullMQ requires this to be null\n  lazyConnect: true,\n})\n\nexport interface LeadFetchJobData {\n  campaignId: string\n  jobId: string\n  userId: string\n  isRetry?: boolean\n}\n\nexport interface EmailSendQueueData {\n  jobId: string\n  userId: string\n  gmailAccountId: string\n}\n\n// Job queue for lead fetching\nexport const leadFetchQueue = new Queue('lead-fetch', {\n  connection: redis,\n  defaultJobOptions: {\n    removeOnComplete: 50, // Keep last 50 completed jobs\n    removeOnFail: 100, // Keep last 100 failed jobs\n    attempts: 1,\n  },\n})\n\nexport const emailSendQueue = new Queue('email-send', {\n  connection: redis,\n  defaultJobOptions: {\n    removeOnComplete: 200,\n    removeOnFail: 200,\n    attempts: 3,\n    backoff: {\n      type: 'exponential',\n      delay: 5000,\n    },\n  },\n})\n\n// Enqueue a job\nexport async function enqueueJob(\n  jobName: string,\n  data: LeadFetchJobData,\n  options: any = {}\n): Promise<Job> {\n  return leadFetchQueue.add(jobName, data, {\n    // Delay job to prevent immediate execution and allow for spacing\n    delay: options.delay || 1000,\n    ...options,\n  })\n}\n\nexport async function enqueueEmailSendJob(\n  data: EmailSendQueueData,\n  options: any = {}\n): Promise<Job> {\n  return emailSendQueue.add('email-send', data, {\n    delay: options.delay || 0,\n    ...options,\n  })\n}\n\nexport async function removePendingCampaignJobs(campaignId: string): Promise<number> {\n  const jobStates = ['wait', 'delayed', 'paused', 'prioritized', 'waiting-children']\n  const jobs = await leadFetchQueue.getJobs(jobStates as any)\n  let removed = 0\n\n  for (const job of jobs) {\n    if (job?.data?.campaignId === campaignId) {\n      await job.remove()\n      removed += 1\n    }\n  }\n\n  return removed\n}\n\n// Get job status\nexport async function getJobStatus(jobId: string) {\n  const job = await Job.fromId(leadFetchQueue, jobId)\n  if (!job) return null\n\n  return {\n    id: job.id,\n    name: job.name,\n    data: job.data,\n    progress: job.progress,\n    returnValue: job.returnvalue,\n    failedReason: job.failedReason,\n    processedOn: job.processedOn,\n    finishedOn: job.finishedOn,\n    opts: job.opts,\n  }\n}\n\n// Cleanup old jobs\nexport async function cleanupJobs() {\n  await leadFetchQueue.clean(24 * 60 * 60 * 1000, 100, 'completed') // Clean completed jobs older than 1 day\n  await leadFetchQueue.clean(7 * 24 * 60 * 60 * 1000, 50, 'failed') // Clean failed jobs older than 7 days\n}\n\nexport { redis }\n","usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/lib/rate-limit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/lib/worker.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1570,1573],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1570,1573],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1683,1686],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1683,1686],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1693,1696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1693,1696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userRateLimit' is assigned a value but never used.","line":57,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'campaignRateLimit' is assigned a value but never used.","line":58,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":430,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":430,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15738,15741],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15738,15741],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":506,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":506,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18426,18429],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18426,18429],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":512,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":512,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18659,18662],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18659,18662],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":526,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":526,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19299,19302],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19299,19302],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1024,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1024,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[33914,33917],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[33914,33917],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1028,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1028,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[34033,34036],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[34033,34036],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1034,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1034,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[34159,34162],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[34159,34162],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1038,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1038,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[34281,34284],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[34281,34284],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/lib/worker.ts\nimport { Worker, Job } from 'bullmq'\nimport type { Lead, Prisma } from '@prisma/client'\nimport { redis, LeadFetchJobData } from './queue'\nimport { prisma } from './prisma'\nimport { apollo, ApolloError, ApolloSearchFilters, ApolloLead, ApolloSearchResponse } from './apollo/apollo'\nimport { generateSmartLeadSummary } from './gemini'\nimport { generateLeadSummary, SheetLeadRow, sanitizeEmailForSheet, chunkArray } from './utils'\nimport { \n  createUserRateLimit, \n  createCampaignRateLimit, \n  RedisLock \n} from './rate-limit'\n\nimport { createAuthorizedClient } from './google-sheet/google-sheet'\nimport { writeLeadsToSheet } from './google-sheet/google-sheet-writer'\n\nconst parsedPreparationConcurrency = Number(process.env.LEAD_PREPARATION_CONCURRENCY || '5')\nconst LEAD_PREPARATION_CONCURRENCY = Number.isFinite(parsedPreparationConcurrency) && parsedPreparationConcurrency > 0\n  ? Math.floor(parsedPreparationConcurrency)\n  : 5\nconst parsedInsertBatchSize = Number(process.env.LEAD_INSERT_BATCH_SIZE || '500')\nconst LEAD_INSERT_BATCH_SIZE = Number.isFinite(parsedInsertBatchSize) && parsedInsertBatchSize >= 50\n  ? Math.floor(parsedInsertBatchSize)\n  : 500\n\ntype PreparedLead = {\n  lookupKey: string\n  dbData: Prisma.LeadCreateManyInput\n  sheetRow: SheetLeadRow\n}\n\nexport class LeadFetchWorker {\n  private worker: Worker\n\n  constructor() {\n    this.worker = new Worker('lead-fetch', this.processJob.bind(this), {\n      connection: redis,\n      concurrency: 2, // Reduced concurrency for rate limiting\n    })\n\n    this.worker.on('completed', (job: any) => {\n      console.log(`✅ Job ${job.id} completed successfully`)\n    })\n\n    this.worker.on('failed', (job: any, err: any) => {\n      console.error(`❌ Job ${job?.id} failed:`, err.message)\n    })\n  }\n\n  private async processJob(job: Job<LeadFetchJobData>): Promise<void> {\n    const { campaignId, jobId, userId, isRetry } = job.data\n    \n    console.log(`🚀 Starting lead fetch job ${jobId} for campaign ${campaignId}${isRetry ? ' (RETRY)' : ''}`)\n\n    // Set up rate limiters\n    const userRateLimit = createUserRateLimit(userId)\n    const campaignRateLimit = createCampaignRateLimit(campaignId)\n    \n    // Test connection to Apollo API\n    try {\n      const connected = await apollo.checkConnection()\n      if (!connected) {\n        throw new Error('Failed to connect to Apollo API')\n      }\n      console.log('✅ Connected to Apollo API')\n    } catch (error) {\n      console.error('❌ Apollo API connection failed:', error)\n      throw new Error(`Apollo API connection failed: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    }\n\n    // Acquire distributed lock to prevent concurrent execution\n    const lock = new RedisLock(`campaign:${campaignId}`)\n    const lockAcquired = await lock.acquire()\n\n    if (!lockAcquired) {\n      console.log(`⚠️ Cannot acquire lock for campaign ${campaignId} - another job may be running`)\n      throw new Error(`Cannot acquire lock for campaign ${campaignId} - another job may be running`)\n    }\n\n    console.log(`🔒 Lock acquired for campaign ${campaignId}`)\n\n    try {\n      // Update job status to running\n      await this.updateJobStatus(jobId, 'RUNNING', { startedAt: new Date() })\n\n      // Get campaign details\n      const campaign = await prisma.campaign.findUnique({\n        where: { id: campaignId },\n        include: {\n          user: {\n            include: {\n              googleTokens: true,\n            },\n          },\n          googleSheet: true,\n        },\n      })\n\n      if (!campaign) {\n        console.warn(`⚠️ Campaign ${campaignId} no longer exists. Cancelling job ${jobId}.`)\n        await this.cancelJobExecution(job, jobId, null, `Campaign ${campaignId} not found`)\n        return\n      }\n\n      if (!campaign.isActive) {\n        console.warn(`⏸️ Campaign ${campaignId} is inactive. Cancelling job ${jobId}.`)\n        await this.cancelJobExecution(job, jobId, null, 'Campaign is paused')\n        return\n      }\n\n      const googleToken = campaign.user.googleTokens\n      if (!googleToken) {\n        throw new Error(`No Google token found for user ${userId}`)\n      }\n\n      const attempt = await prisma.jobAttempt.create({\n        data: {\n          campaignJobId: jobId,\n          attemptNumber: await this.getNextAttemptNumber(jobId),\n          status: 'RUNNING',\n        },\n      })\n\n      console.log(`📝 Created job attempt ${attempt.id} (attempt #${attempt.attemptNumber})`)\n\n      console.log(`📋 Processing campaign: ${campaign.name}`)\n      console.log(`📊 Target: ${campaign.nicheOrJobTitle} in ${campaign.location}`)\n      console.log(`🔍 Keywords: ${campaign.keywords || 'none'}`)\n      console.log(`📈 Max leads: ${campaign.maxLeads}`)\n\n      // Set up rate limiters\n      const userRateLimit = createUserRateLimit(userId)\n      const campaignRateLimit = createCampaignRateLimit(campaignId)\n\n      let totalLeadsProcessed = 0\n      let totalLeadsWritten = 0\n\n      // Parse job titles and locations from campaign\n      const jobTitles = campaign.nicheOrJobTitle \n        ? campaign.nicheOrJobTitle.split(',').map(t => t.trim()).filter(t => t.length > 0)\n        : []\n\n      const locations = campaign.location\n        ? campaign.location.split(',').map(l => l.trim()).filter(l => l.length > 0)\n        : []\n\n      const includeDomains = campaign.includeDomains\n        ? campaign.includeDomains.split(',').map(d => d.trim().toLowerCase()).filter(Boolean)\n        : []\n\n      const excludeDomains = campaign.excludeDomains\n        ? campaign.excludeDomains.split(',').map(d => d.trim().toLowerCase()).filter(Boolean)\n        : []\n\n      console.log(`🔍 Job titles:`, jobTitles)\n      console.log(`📍 Locations:`, locations)\n      if (includeDomains.length > 0) {\n        console.log(`✅ Including domains:`, includeDomains)\n      }\n      if (excludeDomains.length > 0) {\n        console.log(`⛔ Excluding domains:`, excludeDomains)\n      }\n\n      let aggregatedLeads: Lead[] = []\n      let aggregatedSheetRows: SheetLeadRow[] = []\n      let pagesProcessed = 0\n      let totalPagesReported = 0\n\n      const modes: Array<'conserve' | 'balanced'> = campaign.searchMode === 'conserve'\n        ? ['conserve', 'balanced']\n        : ['balanced']\n\n      for (const mode of modes) {\n        const requestedPageSize = Math.max(1, Math.min(campaign.pageSize || 25, 100))\n        const perPage = mode === 'conserve' ? Math.min(requestedPageSize, 15) : requestedPageSize\n        const desiredMaxPages = Math.max(1, Math.ceil((campaign.maxLeads || perPage) / perPage))\n        const maxPagesToFetch = mode === 'conserve'\n          ? Math.min(20, Math.max(10, desiredMaxPages))\n          : Math.min(50, Math.max(30, desiredMaxPages))\n        const emptyPageThreshold = mode === 'conserve' ? 2 : 3\n\n        const seenLeads = new Set<string>()\n        const attemptLeads: Lead[] = []\n        const attemptRows: SheetLeadRow[] = []\n\n        let currentPage = 1\n        let consecutiveEmptyPages = 0\n        let attemptPagesProcessed = 0\n        let attemptTotalPagesReported = 0\n\n        console.log(`🎯 Fetching up to ${campaign.maxLeads} leads with page size ${perPage}`)\n        console.log(`🛡️ Page fetch ceiling set to ${maxPagesToFetch} pages (${mode === 'conserve' ? 'credit saver' : 'balanced'} mode)`)\n\n        while (attemptLeads.length < campaign.maxLeads) {\n          const campaignStillActive = await this.verifyCampaignIsActive(campaignId, job, jobId, attempt.id, 'pagination loop')\n          if (!campaignStillActive) {\n            return\n          }\n\n          await this.checkRateLimits([userRateLimit, campaignRateLimit])\n\n          const searchFilters: ApolloSearchFilters = {\n            person_titles: jobTitles,\n            person_locations: locations,\n            keywords: campaign.keywords \n              ? campaign.keywords.split(',').map(k => k.trim()).filter(k => k.length > 0)\n              : undefined,\n            page: currentPage,\n            per_page: perPage,\n          }\n\n          console.log(`🔍 Apollo search (page ${currentPage}):`, JSON.stringify(searchFilters))\n\n          const searchResponse = await this.executeApolloSearchWithRetry(searchFilters)\n          const totalPages = searchResponse.pagination?.total_pages || currentPage\n          attemptTotalPagesReported = Math.max(attemptTotalPagesReported, totalPages)\n          attemptPagesProcessed += 1\n\n          const leads = apollo.processLeads(searchResponse.people)\n          console.log(`📊 Apollo returned ${leads.length} leads on page ${currentPage}`)\n\n          if (leads.length === 0) {\n            consecutiveEmptyPages += 1\n            if (currentPage >= totalPages) {\n              console.log(`⚠️ No more leads returned (page ${currentPage}), stopping pagination.`)\n              break\n            }\n            if (consecutiveEmptyPages >= emptyPageThreshold) {\n              console.log(`⚠️ Received empty responses for ${consecutiveEmptyPages} consecutive pages, stopping early to save credits.`)\n              break\n            }\n            currentPage += 1\n            continue\n          }\n\n          consecutiveEmptyPages = 0\n\n          const filteredByDomain = leads.filter(lead => {\n            const domain = (lead.domain || '').toLowerCase()\n\n            if (includeDomains.length > 0 && (!domain || !includeDomains.some(d => domain.includes(d)))) {\n              return false\n            }\n\n            if (excludeDomains.length > 0 && domain && excludeDomains.some(d => domain.includes(d))) {\n              return false\n            }\n\n            return true\n          })\n\n          if (filteredByDomain.length !== leads.length) {\n            console.log(`🧹 Domain filters removed ${leads.length - filteredByDomain.length} leads on page ${currentPage}`)\n          }\n\n          const remainingCapacity = Math.max(0, campaign.maxLeads - attemptLeads.length)\n          const uniqueLeads = [] as ApolloLead[]\n\n          for (const lead of filteredByDomain) {\n            const rawEmail = lead.email?.toLowerCase().trim() || ''\n            const dedupeKey = rawEmail && this.isValidEmail(rawEmail) && !rawEmail.includes('not_unlocked')\n              ? rawEmail\n              : `id:${lead.id}`\n            if (seenLeads.has(dedupeKey)) {\n              continue\n            }\n            seenLeads.add(dedupeKey)\n            uniqueLeads.push(lead)\n            if (uniqueLeads.length >= remainingCapacity) {\n              break\n            }\n          }\n\n          if (uniqueLeads.length === 0) {\n            console.log(`⚠️ No new unique leads on page ${currentPage}`)\n          } else {\n            console.log(`🚀 Processing ${uniqueLeads.length} unique leads from page ${currentPage}`)\n            const allowCrossCampaignDuplicates = mode === 'balanced' && modes.length > 1\n            await this.enrichLeadsWithBulkMatch(uniqueLeads)\n            const processedLeads = await this.processLeads(uniqueLeads, campaign.id, userId, allowCrossCampaignDuplicates)\n            processedLeads.forEach(result => {\n              attemptLeads.push(result.record)\n              attemptRows.push(result.sheet)\n            })\n            totalLeadsProcessed = attemptLeads.length\n            await this.updateProgress(job, attempt.id, currentPage, totalLeadsProcessed, totalLeadsWritten)\n          }\n\n          if (attemptLeads.length >= campaign.maxLeads) {\n            console.log(`✅ Reached requested max leads (${campaign.maxLeads}).`)\n            break\n          }\n\n          if (currentPage >= totalPages) {\n            console.log(`🏁 Reached last available page (${totalPages}).`)\n            break\n          }\n\n          if (currentPage >= maxPagesToFetch) {\n            console.log(`🛑 Hit configured page limit of ${maxPagesToFetch}. Ending search to conserve credits.`)\n            break\n          }\n\n          currentPage += 1\n        }\n\n        if (attemptLeads.length > 0) {\n          aggregatedLeads = attemptLeads\n          aggregatedSheetRows = attemptRows\n          pagesProcessed = attemptPagesProcessed\n          totalPagesReported = attemptTotalPagesReported\n          break\n        }\n\n        if (mode === 'conserve') {\n          console.log('ℹ️ Credit saver mode returned no leads; retrying with balanced coverage.')\n          totalLeadsProcessed = 0\n        }\n      }\n\n      totalLeadsProcessed = aggregatedLeads.length\n\n      const activeAfterFetch = await this.verifyCampaignIsActive(campaignId, job, jobId, attempt.id, 'post-fetch')\n      if (!activeAfterFetch) {\n        return\n      }\n\n      if (aggregatedLeads.length === 0) {\n        console.log('ℹ️ No leads matched the provided filters within the page limit.')\n\n        await this.updateJobStatus(jobId, 'SUCCEEDED', {\n          finishedAt: new Date(),\n          totalPages: pagesProcessed,\n          leadsProcessed: 0,\n          leadsWritten: 0,\n          lastError: null,\n        })\n\n        await this.updateAttemptStatus(attempt.id, 'SUCCEEDED', {\n          finishedAt: new Date(),\n          pagesProcessed,\n          leadsFound: 0,\n          leadsWritten: 0,\n        })\n\n        console.log('🏁 Campaign completed with zero leads found. User will see \"No leads found\" message.')\n        return\n      }\n\n      const stillActiveBeforeWrite = await this.verifyCampaignIsActive(campaignId, job, jobId, attempt.id, 'before sheet write')\n      if (!stillActiveBeforeWrite) {\n        return\n      }\n\n      try {\n        const oauth2Client = await createAuthorizedClient(\n          googleToken.accessToken,\n          googleToken.refreshToken\n        )\n\n        console.log(`📊 Writing ${aggregatedSheetRows.length} leads to Google Sheet: ${campaign.googleSheet.title}`)\n\n        const writtenCount = await writeLeadsToSheet(\n          oauth2Client,\n          campaign.googleSheet.spreadsheetId,\n          'Sheet1!A:P',\n          aggregatedSheetRows\n        )\n\n        totalLeadsWritten = writtenCount\n        console.log(`✅ Successfully wrote ${writtenCount} leads to Google Sheet`)\n      } catch (sheetError) {\n        console.error('❌ Failed to write leads to Google Sheet:', sheetError)\n        await this.updateAttemptStatus(attempt.id, 'RUNNING', {\n          error: `Sheet write failed: ${sheetError instanceof Error ? sheetError.message : 'Unknown error'}`\n        })\n      }\n\n      console.log(`🏁 Campaign completed: ${totalLeadsProcessed} leads processed, ${totalLeadsWritten} written to sheet`)\n\n      await this.updateJobStatus(jobId, 'SUCCEEDED', {\n        finishedAt: new Date(),\n        totalPages: totalPagesReported,\n        leadsProcessed: totalLeadsProcessed,\n        leadsWritten: totalLeadsWritten,\n      })\n\n      await this.updateAttemptStatus(attempt.id, 'SUCCEEDED', {\n        finishedAt: new Date(),\n        pagesProcessed,\n        leadsFound: totalLeadsProcessed,\n        leadsWritten: totalLeadsWritten,\n      })\n\n    } catch (error) {\n      console.error(`❌ Job ${jobId} failed:`, error)\n      \n      const errorMessage = error instanceof Error ? error.message : 'Unknown error'\n      \n      await this.updateJobStatus(jobId, 'FAILED', {\n        finishedAt: new Date(),\n        lastError: errorMessage,\n      })\n\n      // Update attempt record\n      const attempts = await prisma.jobAttempt.findMany({\n        where: { campaignJobId: jobId },\n        orderBy: { attemptNumber: 'desc' },\n        take: 1,\n      })\n\n      if (attempts[0]) {\n        await this.updateAttemptStatus(attempts[0].id, 'FAILED', {\n          finishedAt: new Date(),\n          error: errorMessage,\n        })\n      }\n\n      await job.discard()\n\n      throw error // Re-throw to mark job as failed in BullMQ\n    } finally {\n      // Always release the lock\n      await lock.release()\n      console.log(`🔓 Released lock for campaign ${campaignId}`)\n    }\n  }\n\n  private async checkRateLimits(rateLimiters: any[]): Promise<void> {\n    for (const limiter of rateLimiters) {\n      const result = await limiter.checkAndConsume(1)\n      if (!result.allowed) {\n        const waitTime = Math.max(1000, result.resetTime - Date.now())\n        console.log(`⏳ Rate limit exceeded, waiting ${waitTime}ms`)\n        await this.delay(waitTime)\n      }\n    }\n  }\n\n  private async executeApolloSearchWithRetry(filters: ApolloSearchFilters, attempt: number = 1): Promise<ApolloSearchResponse> {\n    try {\n      return await apollo.searchLeads(filters)\n    } catch (error) {\n      if (error instanceof ApolloError && error.shouldRetry && attempt < 5) {\n        const waitTime = Math.min(15000, attempt * 2000)\n        console.warn(`⚠️ Apollo rate limit/server issue (attempt ${attempt}). Retrying in ${waitTime}ms...`)\n        await this.delay(waitTime)\n        return this.executeApolloSearchWithRetry(filters, attempt + 1)\n      }\n\n      throw error\n    }\n  }\n\n  private async enrichLeadsWithBulkMatch(leads: ApolloLead[]): Promise<void> {\n    const targets = leads.filter(lead => {\n      const email = lead.email ? lead.email.toLowerCase() : ''\n      const needsEmail = !email || email.includes('not_unlocked')\n      const needsPhone = !lead.phone\n      return needsEmail || needsPhone\n    })\n\n    if (targets.length === 0) {\n      return\n    }\n\n    try {\n      const payload = targets.map(lead => ({\n        identifier: lead.id,\n        first_name: lead.first_name || undefined,\n        last_name: lead.last_name || undefined,\n        title: lead.title || undefined,\n        organization_name: lead.company_name || undefined,\n        domain: this.cleanDomain(lead.domain) || undefined,\n        linkedin_url: lead.linkedin_url || undefined,\n        email: lead.email && !lead.email.includes('not_unlocked') ? lead.email : undefined,\n        city: lead.city || undefined,\n        state: lead.state || undefined,\n        country: lead.country || undefined,\n      }))\n\n      const response = await apollo.bulkMatchPeople(payload, {\n        revealPersonalEmails: true,\n        revealPhoneNumber: false,\n      })\n\n      const leadMap = new Map<string, ApolloLead>()\n      leads.forEach(lead => {\n        leadMap.set(lead.id, lead)\n      })\n\n      response.matches?.forEach(match => {\n        const identifier = match?.client_identifier || match?.id\n        if (!identifier) return\n\n        const lead = leadMap.get(identifier)\n        if (!lead) {\n          return\n        }\n\n        const person = match\n        const candidateEmails: string[] = []\n        if (typeof person.email === 'string') candidateEmails.push(person.email)\n        if (Array.isArray(person.emails)) {\n          person.emails.forEach((entry: any) => {\n            const val = entry?.value || entry?.email\n            if (val) candidateEmails.push(String(val))\n          })\n        }\n        if (Array.isArray(person.emails_raw)) {\n          person.emails_raw.forEach((entry: any) => {\n            if (typeof entry === 'string') candidateEmails.push(entry)\n          })\n        }\n\n        const unlockedEmail = candidateEmails.find(email => email && !email.includes('not_unlocked'))\n        if (unlockedEmail) {\n          lead.email = unlockedEmail.toLowerCase().trim()\n        }\n\n        const candidatePhones: string[] = []\n        if (typeof person.phone_number === 'string') candidatePhones.push(person.phone_number)\n        if (typeof person.mobile_number === 'string') candidatePhones.push(person.mobile_number)\n        if (Array.isArray(person.phone_numbers)) {\n          person.phone_numbers.forEach((entry: any) => {\n            if (typeof entry === 'string') {\n              candidatePhones.push(entry)\n            } else if (entry?.number) {\n              candidatePhones.push(entry.number)\n            }\n          })\n        }\n        const phone = candidatePhones.find(num => typeof num === 'string' && num.trim().length > 0)\n        if (phone) {\n          lead.phone = phone.trim()\n        }\n\n        if (person.linkedin_url) {\n          lead.linkedin_url = person.linkedin_url\n        }\n\n        if (person.organization?.name) {\n          lead.company_name = person.organization.name\n        }\n        if (person.organization?.website_url) {\n          lead.domain = person.organization.website_url\n        }\n        if (person.organization?.industry) {\n          lead.industry = person.organization.industry\n        }\n\n        if (person.street_address) {\n          lead.street_address = person.street_address\n        }\n        if (person.city) {\n          lead.city = person.city\n        }\n        if (person.state) {\n          lead.state = person.state\n        }\n        if (person.country) {\n          lead.country = person.country\n        }\n        if (person.postal_code) {\n          lead.postal_code = person.postal_code\n        }\n        if (person.formatted_address) {\n          lead.formatted_address = person.formatted_address\n        }\n      })\n    } catch (error) {\n      console.error('❌ Bulk match enrichment failed:', error)\n    }\n  }\n\n  private async cancelJobExecution(\n    job: Job,\n    jobId: string,\n    attemptId: string | null,\n    reason: string\n  ): Promise<void> {\n    const now = new Date()\n\n    const existingProgress = typeof job.progress === 'object' && job.progress !== null\n      ? job.progress as Record<string, unknown>\n      : {}\n\n    await job.updateProgress({\n      ...existingProgress,\n      status: 'cancelled',\n      reason,\n    })\n\n    await this.updateJobStatus(jobId, 'CANCELLED', {\n      finishedAt: now,\n      lastError: reason,\n      nextRunAt: null,\n    })\n\n    if (attemptId) {\n      await this.updateAttemptStatus(attemptId, 'CANCELLED', {\n        finishedAt: now,\n        error: reason,\n      })\n    }\n  }\n\n  private async verifyCampaignIsActive(\n    campaignId: string,\n    job: Job,\n    jobId: string,\n    attemptId: string,\n    context: string\n  ): Promise<boolean> {\n    const campaignState = await prisma.campaign.findUnique({\n      where: { id: campaignId },\n      select: { isActive: true },\n    })\n\n    if (!campaignState) {\n      console.warn(`⚠️ Campaign ${campaignId} removed during execution (${context}). Cancelling job.`)\n      await this.cancelJobExecution(job, jobId, attemptId, `Campaign removed during ${context}`)\n      return false\n    }\n\n    if (!campaignState.isActive) {\n      console.warn(`⏸️ Campaign ${campaignId} paused during execution (${context}). Cancelling job.`)\n      await this.cancelJobExecution(job, jobId, attemptId, `Campaign paused during ${context}`)\n      return false\n    }\n\n    return true\n  }\n\n  private async processLeads(\n    leads: ApolloLead[],\n    campaignId: string,\n    userId: string,\n    allowCrossCampaignDuplicates: boolean = false\n  ): Promise<Array<{ record: Lead; sheet: SheetLeadRow }>> {\n    if (leads.length === 0) {\n      return []\n    }\n\n    const prepared = await this.prepareLeads(leads, campaignId, userId, allowCrossCampaignDuplicates)\n\n    if (prepared.length === 0) {\n      console.log('ℹ️ No leads passed preparation after enrichment and validation checks.')\n      return []\n    }\n\n    const deduped = this.dedupePreparedLeads(prepared)\n    const toInsert = await this.filterExistingLeads(deduped, campaignId, userId, allowCrossCampaignDuplicates)\n\n    if (toInsert.length === 0) {\n      console.log('ℹ️ All prepared leads already exist for this user/campaign. Skipping insert.')\n      return []\n    }\n\n    const insertedEmailSet = new Set<string>()\n\n    for (const batch of chunkArray(toInsert, LEAD_INSERT_BATCH_SIZE)) {\n      const payload = batch.map(item => ({ ...item.dbData }))\n      const result = await prisma.lead.createMany({\n        data: payload,\n        skipDuplicates: true,\n      })\n\n      payload.forEach(item => {\n        if (item.email) {\n          insertedEmailSet.add(item.email)\n        }\n      })\n\n      if (result.count !== payload.length) {\n        console.warn(`⚠️ createMany skipped ${payload.length - result.count} lead(s) due to duplicates or race conditions.`)\n      }\n    }\n\n    if (insertedEmailSet.size === 0) {\n      console.log('ℹ️ No new leads were inserted after deduplication. Skipping sheet write.')\n      return []\n    }\n\n    const insertedEmails = Array.from(insertedEmailSet)\n    const persistedRecords = await this.fetchLeadsByEmails(insertedEmails, campaignId)\n    const recordMap = new Map(persistedRecords.map(record => [record.email, record]))\n\n    const processed = toInsert\n      .map(item => {\n        const email = item.dbData.email\n        if (!email) {\n          return null\n        }\n        const record = recordMap.get(email)\n        if (!record) {\n          console.warn(`⚠️ Could not load lead record for email ${email} after insertion.`)\n          return null\n        }\n        return { record, sheet: item.sheetRow }\n      })\n      .filter((value): value is { record: Lead; sheet: SheetLeadRow } => Boolean(value))\n\n    console.log(`📊 Successfully processed ${processed.length} out of ${leads.length} leads`)\n    return processed\n  }\n\n  private async prepareLeads(\n    leads: ApolloLead[],\n    campaignId: string,\n    userId: string,\n    allowCrossCampaignDuplicates: boolean\n  ): Promise<PreparedLead[]> {\n    const results = await this.mapWithConcurrency(\n      leads,\n      LEAD_PREPARATION_CONCURRENCY,\n      async (lead) => {\n        try {\n          return await this.prepareLead(lead, campaignId, userId, allowCrossCampaignDuplicates)\n        } catch (error) {\n          console.error(`❌ Error preparing lead ${lead.id}:`, error)\n          return null\n        }\n      }\n    )\n\n    return results.filter((value): value is PreparedLead => Boolean(value))\n  }\n\n  private dedupePreparedLeads(prepared: PreparedLead[]): PreparedLead[] {\n    if (prepared.length <= 1) {\n      return prepared\n    }\n\n    const seen = new Set<string>()\n    const unique: PreparedLead[] = []\n\n    for (const item of prepared) {\n      if (seen.has(item.lookupKey)) {\n        continue\n      }\n      seen.add(item.lookupKey)\n      unique.push(item)\n    }\n\n    if (unique.length !== prepared.length) {\n      console.log(`ℹ️ Removed ${prepared.length - unique.length} duplicate lead(s) during in-memory deduplication.`)\n    }\n\n    return unique\n  }\n\n  private async filterExistingLeads(\n    prepared: PreparedLead[],\n    campaignId: string,\n    userId: string,\n    allowCrossCampaignDuplicates: boolean\n  ): Promise<PreparedLead[]> {\n    if (prepared.length === 0) {\n      return []\n    }\n\n    const scopeFilter = allowCrossCampaignDuplicates\n      ? { campaignId }\n      : { userId }\n\n    const emailSet = new Set<string>()\n    prepared.forEach(item => {\n      if (item.dbData.email) {\n        emailSet.add(item.dbData.email)\n      }\n    })\n\n    if (emailSet.size === 0) {\n      return []\n    }\n\n    const existingEmails = new Set<string>()\n\n    for (const chunk of chunkArray(Array.from(emailSet), 500)) {\n      const matches = await prisma.lead.findMany({\n        where: {\n          ...scopeFilter,\n          email: {\n            in: chunk,\n          },\n        },\n        select: { email: true },\n      })\n\n      matches.forEach(match => existingEmails.add(match.email))\n    }\n\n    if (existingEmails.size === 0) {\n      return prepared\n    }\n\n    const filtered = prepared.filter(item => !existingEmails.has(item.dbData.email || ''))\n\n    if (filtered.length !== prepared.length) {\n      console.log(`ℹ️ Skipped ${prepared.length - filtered.length} database duplicate lead(s).`)\n    }\n\n    return filtered\n  }\n\n  private async fetchLeadsByEmails(emails: string[], campaignId: string): Promise<Lead[]> {\n    if (!emails.length) {\n      return []\n    }\n\n    const uniqueEmails = Array.from(new Set(emails))\n    const records: Lead[] = []\n\n    for (const chunk of chunkArray(uniqueEmails, 500)) {\n      const chunkRecords = await prisma.lead.findMany({\n        where: {\n          campaignId,\n          email: {\n            in: chunk,\n          },\n        },\n      })\n      records.push(...chunkRecords)\n    }\n\n    return records\n  }\n\n  private async mapWithConcurrency<T, R>(\n    items: T[],\n    concurrency: number,\n    mapper: (item: T, index: number) => Promise<R>\n  ): Promise<R[]> {\n    if (items.length === 0) {\n      return []\n    }\n\n    const cappedConcurrency = Math.max(1, Math.min(concurrency, items.length))\n    const results: R[] = new Array(items.length)\n    let nextIndex = 0\n\n    const worker = async () => {\n      while (true) {\n        const currentIndex = nextIndex\n        if (currentIndex >= items.length) {\n          break\n        }\n        nextIndex += 1\n        results[currentIndex] = await mapper(items[currentIndex], currentIndex)\n      }\n    }\n\n    await Promise.all(Array.from({ length: cappedConcurrency }, () => worker()))\n    return results\n  }\n\n  private async prepareLead(\n    lead: ApolloLead,\n    campaignId: string,\n    userId: string,\n    allowCrossCampaignDuplicates: boolean\n  ): Promise<PreparedLead | null> {\n    let rawEmail = lead.email ? lead.email.toLowerCase().trim() : ''\n\n    if (!rawEmail || rawEmail.includes('not_unlocked')) {\n      const revealed = await apollo.revealEmail(lead.id)\n      if (revealed) {\n        rawEmail = revealed.toLowerCase().trim()\n        lead.email = rawEmail\n        console.log(`🔓 Revealed email for ${lead.first_name} ${lead.last_name}: ${rawEmail}`)\n      }\n    }\n\n    const hasValidEmail = !!rawEmail && this.isValidEmail(rawEmail) && !rawEmail.includes('not_unlocked')\n    const normalizedEmail = hasValidEmail ? rawEmail : `${lead.id.toLowerCase()}@locked.apollo`\n\n    if (!hasValidEmail) {\n      console.log(`⚠️ Email marked as locked or invalid, will blank in sheet output: ${lead.email}`)\n    }\n\n    const phone = lead.phone ? lead.phone.toString().trim() : ''\n    const streetAddress = lead.street_address ? lead.street_address.toString().trim() : ''\n    const city = lead.city ? lead.city.toString().trim() : ''\n    const state = lead.state ? lead.state.toString().trim() : ''\n    const country = lead.country ? lead.country.toString().trim() : ''\n    const postalCode = lead.postal_code ? lead.postal_code.toString().trim() : ''\n    const formattedAddress = lead.formatted_address ? lead.formatted_address.toString().trim() : ''\n\n    const summary = (await this.createLeadSummary(lead)).trim() || 'Summary unavailable.'\n    const finalSummary = hasValidEmail\n      ? summary\n      : `${summary}\\nEmail address is locked in Apollo. Unlock the contact to access the email.`\n\n    const website = this.cleanUrl(lead.domain)\n    const linkedinUrl = this.cleanUrl(lead.linkedin_url)\n    const domain = this.cleanDomain(lead.domain)\n    const location = this.cleanString(\n      formattedAddress || [city, state, country].filter(Boolean).join(', ')\n    )\n\n    const dbData: Prisma.LeadCreateManyInput = {\n      userId,\n      campaignId,\n      email: normalizedEmail,\n      firstName: this.cleanString(lead.first_name) ?? null,\n      lastName: this.cleanString(lead.last_name) ?? null,\n      company: this.cleanString(lead.company_name) ?? null,\n      jobTitle: this.cleanString(lead.title) ?? null,\n      website: website ?? null,\n      linkedinUrl: linkedinUrl ?? null,\n      summary: finalSummary,\n      location: location ?? null,\n      industry: this.cleanString(lead.industry || null) ?? null,\n      domain: domain ?? null,\n      tags: [],\n      source: 'apollo',\n      isValid: hasValidEmail,\n      isSuppressed: false,\n    }\n\n    const sheetRow: SheetLeadRow = {\n      email: sanitizeEmailForSheet(hasValidEmail ? rawEmail : null),\n      firstName: dbData.firstName || '',\n      lastName: dbData.lastName || '',\n      phone,\n      company: dbData.company || '',\n      jobTitle: dbData.jobTitle || '',\n      website: dbData.website || '',\n      linkedinUrl: dbData.linkedinUrl || '',\n      industry: dbData.industry || '',\n      streetAddress,\n      city,\n      state,\n      country,\n      postalCode,\n      formattedAddress,\n      summary: finalSummary,\n    }\n\n    return {\n      lookupKey: this.buildLookupKey(campaignId, userId, normalizedEmail, allowCrossCampaignDuplicates),\n      dbData,\n      sheetRow,\n    }\n  }\n\n  private buildLookupKey(\n    campaignId: string,\n    userId: string,\n    email: string,\n    allowCrossCampaignDuplicates: boolean\n  ): string {\n    return allowCrossCampaignDuplicates ? `${campaignId}:${email}` : `${userId}:${email}`\n  }\n\n  private async createLeadSummary(lead: ApolloLead): Promise<string> {\n    try {\n      return await generateSmartLeadSummary({\n        firstName: lead.first_name,\n        lastName: lead.last_name,\n        title: lead.title,\n        company: lead.company_name,\n        domain: lead.domain,\n        email: lead.email,\n        linkedinUrl: lead.linkedin_url,\n      })\n    } catch (error) {\n      console.error('Gemini summary helper failed, using fallback:', error)\n      return generateLeadSummary(lead)\n    }\n  }\n\n  private cleanString(str: string | null | undefined): string | null {\n    if (!str) return null\n    const cleaned = str.toString().trim()\n    return cleaned.length > 0 ? cleaned : null\n  }\n\n  private cleanDomain(domain: string | null | undefined): string | null {\n    if (!domain) return null\n    let value = domain.toString().trim().toLowerCase()\n\n    if (!value) {\n      return null\n    }\n\n    try {\n      const parsed = new URL(value.includes('://') ? value : `https://${value}`)\n      value = parsed.hostname\n    } catch {\n      // If parsing fails, fallback to raw value without protocol/path\n      const stripped = value.replace(/^https?:\\/\\//, '').split('/')[0]\n      value = stripped\n    }\n\n    return value.replace(/^www\\./, '') || null\n  }\n\n  private cleanUrl(url: string | null | undefined): string | null {\n    if (!url) return null\n    let cleaned = url.toString().trim()\n    \n    // Add protocol if missing\n    if (cleaned && !cleaned.startsWith('http://') && !cleaned.startsWith('https://')) {\n      cleaned = 'https://' + cleaned\n    }\n    \n    // Basic URL validation\n    try {\n      new URL(cleaned)\n      return cleaned\n    } catch {\n      return null\n    }\n  }\n\n  private isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n    return emailRegex.test(email)\n  }\n\n  private async updateJobStatus(jobId: string, status: string, updates: any = {}) {\n    return prisma.campaignJob.update({\n      where: { id: jobId },\n      data: {\n        status: status as any,\n        ...updates,\n      },\n    })\n  }\n\n  private async updateAttemptStatus(attemptId: string, status: string, updates: any = {}) {\n    return prisma.jobAttempt.update({\n      where: { id: attemptId },\n      data: {\n        status: status as any,\n        ...updates,\n      },\n    })\n  }\n\n  private async updateProgress(job: Job, attemptId: string, page: number, processed: number, written: number) {\n    // Update job progress for UI\n    await job.updateProgress({\n      page,\n      leadsProcessed: processed,\n      leadsWritten: written,\n      status: 'processing'\n    })\n\n    // Persist progress on the campaign job for dashboard visibility\n    const jobId = job.data.jobId\n    if (jobId) {\n      await prisma.campaignJob.update({\n        where: { id: jobId },\n        data: {\n          status: 'RUNNING',\n          totalPages: Math.max(page, 1),\n          leadsProcessed: processed,\n          leadsWritten: written,\n        },\n      })\n    }\n\n    // Update attempt record\n    await prisma.jobAttempt.update({\n      where: { id: attemptId },\n      data: {\n        pagesProcessed: page,\n        leadsFound: processed,\n        leadsWritten: written,\n      },\n    })\n\n    console.log(`📊 Progress updated: Page ${page}, Processed ${processed}, Written ${written}`)\n  }\n\n  private async getNextAttemptNumber(jobId: string): Promise<number> {\n    const lastAttempt = await prisma.jobAttempt.findFirst({\n      where: { campaignJobId: jobId },\n      orderBy: { attemptNumber: 'desc' },\n    })\n\n    return (lastAttempt?.attemptNumber || 0) + 1\n  }\n\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms))\n  }\n\n  async close(): Promise<void> {\n    console.log('🛑 Closing lead fetch worker...')\n    await this.worker.close()\n  }\n}\n\n// Export singleton worker instance\nlet worker: LeadFetchWorker | null = null\n\nexport function startWorker(): LeadFetchWorker {\n  if (!worker) {\n    console.log('🚀 Starting lead fetch worker...')\n    worker = new LeadFetchWorker()\n    console.log('✅ Lead fetch worker started successfully')\n  }\n  return worker\n}\n\nexport function stopWorker(): Promise<void> {\n  if (worker) {\n    console.log('🛑 Stopping lead fetch worker...')\n    return worker.close()\n  }\n  return Promise.resolve()\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/middleware.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'key' is assigned a value but never used.","line":15,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/middleware.ts\nimport { NextRequest, NextResponse } from 'next/server'\nimport { verifyAuth } from '@/lib/auth'\n\nexport async function middleware(request: NextRequest) {\n  const { pathname } = request.nextUrl\n\n  // Rate limiting for API routes\n  if (pathname.startsWith('/api/campaigns')) {\n    // Simple rate limiting - 100 requests per minute per IP\n    const ip =\n      request.headers.get('x-forwarded-for')?.split(',')[0]?.trim() ||\n      request.headers.get('x-real-ip') ||\n      'unknown'\n    const key = `api_rate_limit:${ip}`\n    \n    // This would be implemented with Redis in production\n    // For now, we'll just add headers for monitoring\n    const response = NextResponse.next()\n    response.headers.set('X-Client-IP', ip)\n    return response\n  }\n\n  // Protect dashboard routes\n  if (pathname.startsWith('/dashboard')) {\n    const authResult = await verifyAuth(request)\n    \n    if (!authResult.success) {\n      return NextResponse.redirect(new URL('/login', request.url))\n    }\n\n    // Admin-only routes\n    if (pathname.startsWith('/dashboard/users') && authResult.user?.role !== 'admin') {\n      return NextResponse.redirect(new URL('/dashboard', request.url))\n    }\n  }\n\n  return NextResponse.next()\n}\n\nexport const config = {\n  matcher: [\n    '/dashboard/:path*',\n    '/api/campaigns/:path*',\n    '/api/users/:path*'\n  ]\n}","usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/scripts/start-worker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/types/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/types/dashboard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/types/gmail.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/types/google-sheet.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/types/next-auth.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mirzatalha/Desktop/Outbond/outbond/src/types/outreach.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]