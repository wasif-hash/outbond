generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id @default(cuid())
  email         String            @unique
  role          String            @default("user")
  password      String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  invitedAt     DateTime?
  isInvited     Boolean           @default(false)
  campaigns     Campaign[]
  emailSendJobs EmailSendJob[]
  gmailAccounts GmailAccount?
  googleTokens  GoogleOAuthToken?
  googleSheets  GoogleSheet[]
  leads         Lead[]

  @@map("users")
}

model GoogleOAuthToken {
  id           String   @id @default(cuid())
  userId       String   @unique
  accessToken  String
  refreshToken String
  expiresAt    DateTime
  scope        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tokenType    String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model GoogleSheet {
  id             String     @id @default(cuid())
  userId         String
  spreadsheetId  String
  title          String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  lastUsedAt     DateTime?
  range          String?
  sheetId        Int?
  sheetTitle     String?
  spreadsheetUrl String
  campaigns      Campaign[]
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, spreadsheetId])
  @@index([userId])
}

model Campaign {
  id              String         @id @default(cuid())
  userId          String
  name            String
  nicheOrJobTitle String
  keywords        String
  location        String
  googleSheetId   String
  maxLeads        Int            @default(1000)
  pageSize        Int            @default(25)
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  excludeDomains  String?
  includeDomains  String?
  source          String         @default("apollo")
  searchMode      String         @default("balanced")
  googleSheet     GoogleSheet    @relation(fields: [googleSheetId], references: [id])
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaignJobs    CampaignJob[]
  emailSendJobs   EmailSendJob[]
  leads           Lead[]

  @@index([userId])
  @@index([userId, isActive])
}

model CampaignJob {
  id             String       @id @default(cuid())
  campaignId     String
  idempotencyKey String       @unique
  status         JobStatus    @default(PENDING)
  attemptCount   Int          @default(0)
  maxAttempts    Int          @default(5)
  startedAt      DateTime?
  finishedAt     DateTime?
  nextRunAt      DateTime?
  totalPages     Int          @default(0)
  leadsProcessed Int          @default(0)
  leadsWritten   Int          @default(0)
  lastError      String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  campaign       Campaign     @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  jobAttempts    JobAttempt[]

  @@index([status])
  @@index([nextRunAt])
  @@index([campaignId])
}

model JobAttempt {
  id             String      @id @default(cuid())
  campaignJobId  String
  attemptNumber  Int
  status         JobStatus
  startedAt      DateTime    @default(now())
  finishedAt     DateTime?
  error          String?
  pagesProcessed Int         @default(0)
  leadsFound     Int         @default(0)
  leadsWritten   Int         @default(0)
  campaignJob    CampaignJob @relation(fields: [campaignJobId], references: [id], onDelete: Cascade)

  @@index([campaignJobId])
}

model Lead {
  id                 String   @id @default(cuid())
  userId             String
  campaignId         String
  email              String
  firstName          String?
  lastName           String?
  company            String?
  jobTitle           String?
  website            String?
  linkedinUrl        String?
  industry           String?
  location           String?
  source             String   @default("apollo")
  tags               String[] @default([])
  isValid            Boolean  @default(true)
  isSuppressed       Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  companyLinkedinUrl String?
  companySize        String?
  domain             String?
  summary            String?
  campaign           Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, campaignId])
  @@index([userId])
  @@index([campaignId])
  @@index([email])
}

model GmailAccount {
  id            String         @id @default(cuid())
  userId        String         @unique
  emailAddress  String         @unique
  accessToken   String
  refreshToken  String
  expiresAt     DateTime
  scope         String
  tokenType     String
  historyId     String?
  connectedAt   DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  emailSendJobs EmailSendJob[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailSendJob {
  id                   String          @id @default(cuid())
  userId               String
  campaignId           String?
  gmailAccountId       String
  leadEmail            String
  leadFirstName        String?
  leadLastName         String?
  leadCompany          String?
  leadSummary          String?
  sheetRowRef          String?
  manualCampaignId     String?
  manualCampaignName   String?
  manualCampaignSource String?
  subject              String
  bodyHtml             String
  bodyText             String?
  status               EmailSendStatus @default(PENDING)
  error                String?
  scheduledAt          DateTime?       @default(now())
  sentAt               DateTime?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  campaign             Campaign?       @relation(fields: [campaignId], references: [id])
  gmailAccount         GmailAccount    @relation(fields: [gmailAccountId], references: [id], onDelete: Cascade)
  user                 User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([campaignId])
  @@index([gmailAccountId])
  @@index([status])
  @@index([manualCampaignId])
}

model RateLimit {
  id         String   @id @default(cuid())
  key        String   @unique
  tokens     Int      @default(0)
  lastRefill DateTime @default(now())
  maxTokens  Int
  refillRate Int

  @@index([key])
}

model JobLock {
  id        String   @id @default(cuid())
  lockKey   String   @unique
  ownerId   String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([lockKey])
  @@index([expiresAt])
}

enum EmailSendStatus {
  PENDING
  QUEUED
  SENDING
  SENT
  FAILED
  CANCELLED
}

enum JobStatus {
  PENDING
  RUNNING
  SUCCEEDED
  FAILED
  CANCELLED
}
